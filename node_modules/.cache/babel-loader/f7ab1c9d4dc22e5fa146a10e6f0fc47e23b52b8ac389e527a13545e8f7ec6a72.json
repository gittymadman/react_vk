{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Diff, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DiffView({\n  codeA,\n  codeB\n}) {\n  const diffText = parseDiff(codeA, codeB); // Parse the diff\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diff-view\",\n    children: /*#__PURE__*/_jsxDEV(Diff, {\n      hunks: diffText.files[0].hunks // Pass the parsed hunks\n      ,\n      viewType: \"unified\" // Choose the view type (unified or split)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = DiffView;\nfunction App() {\n  _s();\n  const [codeA, setCodeA] = useState('const message = \"Hello World\";');\n  const [codeB, setCodeB] = useState('const message = \"Hello React!\";');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: codeA,\n      onChange: e => setCodeA(e.target.value),\n      rows: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: codeB,\n      onChange: e => setCodeB(e.target.value),\n      rows: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiffView, {\n      codeA: codeA,\n      codeB: codeB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"9n6zIJfR6WkFoyVwcYJVTg+51k4=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DiffView\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Diff","parseDiff","jsxDEV","_jsxDEV","DiffView","codeA","codeB","diffText","className","children","hunks","files","viewType","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","setCodeA","setCodeB","value","onChange","e","target","rows","_c2","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Diff, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\n\n\nfunction DiffView({ codeA, codeB }) {\n  const diffText = parseDiff(codeA, codeB); // Parse the diff\n\n  return (\n    <div className=\"diff-view\">\n      <Diff \n        hunks={diffText.files[0].hunks} // Pass the parsed hunks\n        viewType=\"unified\" // Choose the view type (unified or split)\n      />\n    </div>\n  );\n}\n\n\n\nfunction App() {\n  const [codeA, setCodeA] = useState('const message = \"Hello World\";');\n  const [codeB, setCodeB] = useState('const message = \"Hello React!\";');\n\n  return (\n    <div className=\"App\">\n      <h1>Code Diff</h1>\n      <textarea\n        value={codeA}\n        onChange={(e) => setCodeA(e.target.value)}\n        rows={10}\n      />\n      <textarea\n        value={codeB}\n        onChange={(e) => setCodeB(e.target.value)}\n        rows={10}\n      />\n      <DiffView codeA={codeA} codeB={codeB} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AACjD,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzC,SAASC,QAAQA,CAAC;EAAEC,KAAK;EAAEC;AAAM,CAAC,EAAE;EAClC,MAAMC,QAAQ,GAAGN,SAAS,CAACI,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC;;EAE1C,oBACEH,OAAA;IAAKK,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBN,OAAA,CAACH,IAAI;MACHU,KAAK,EAAEH,QAAQ,CAACI,KAAK,CAAC,CAAC,CAAC,CAACD,KAAM,CAAC;MAAA;MAChCE,QAAQ,EAAC,SAAS,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GAXQb,QAAQ;AAejB,SAASc,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACd,KAAK,EAAEe,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,gCAAgC,CAAC;EACpE,MAAM,CAACO,KAAK,EAAEe,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,iCAAiC,CAAC;EAErE,oBACEI,OAAA;IAAKK,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBN,OAAA;MAAAM,QAAA,EAAI;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClBb,OAAA;MACEmB,KAAK,EAAEjB,KAAM;MACbkB,QAAQ,EAAGC,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,IAAI,EAAE;IAAG;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACFb,OAAA;MACEmB,KAAK,EAAEhB,KAAM;MACbiB,QAAQ,EAAGC,CAAC,IAAKH,QAAQ,CAACG,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC1CI,IAAI,EAAE;IAAG;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eACFb,OAAA,CAACC,QAAQ;MAACC,KAAK,EAAEA,KAAM;MAACC,KAAK,EAAEA;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV;AAACG,EAAA,CApBQD,GAAG;AAAAS,GAAA,GAAHT,GAAG;AAsBZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}