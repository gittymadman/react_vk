{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { mapValues } from 'lodash';\nimport { Input } from 'antd';\nimport { diffLines, formatLines } from 'unidiff';\nimport { parseDiff, Diff, Hunk, getChangeKey } from 'react-diff-view';\nimport { useInput } from './hooks';\nimport { useConversations, Conversation } from './comments';\nimport 'antd/dist/reset.css';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_HUNKS = [];\nfunction App() {\n  _s();\n  const oldText = useInput('');\n  const newText = useInput('');\n  const [{\n    type,\n    hunks\n  }, setDiff] = useState({\n    type: '',\n    hunks: EMPTY_HUNKS\n  });\n  const generateDiff = useCallback(() => {\n    if (oldText.value && newText.value) {\n      const diffText = formatLines(diffLines(oldText.value, newText.value), {\n        context: 3\n      });\n      const [diff] = parseDiff(diffText, {\n        nearbySequences: 'zip'\n      });\n      setDiff({\n        type: 'split',\n        hunks: diff.hunks || EMPTY_HUNKS\n      });\n    }\n  }, [oldText.value, newText.value]);\n  useEffect(() => {\n    generateDiff();\n  }, [oldText.value, newText.value, generateDiff]);\n  const [conversations, {\n    initConversation,\n    addComment\n  }] = useConversations();\n  const codeEvents = {\n    onDoubleClick({\n      change\n    }) {\n      const key = getChangeKey(change);\n      if (!conversations[key]) {\n        initConversation(key);\n      }\n    }\n  };\n  const widgets = mapValues(conversations, ({\n    comments\n  }, changeKey) => /*#__PURE__*/_jsxDEV(Conversation, {\n    changeKey: changeKey,\n    comments: comments,\n    onSubmitComment: addComment\n  }, changeKey, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this));\n  const serializeContentToHTML = useCallback(() => {\n    const contentElement = document.getElementById('diff-view');\n    if (!contentElement) {\n      return;\n    }\n    const htmlContent = contentElement.innerHTML;\n\n    // Inline styles from CSS files\n    const styles = `\n          body { font-family: Arial, sans-serif; }\n          .diff { display: flex; }\n          .hunk { margin: 10px 0; }\n          .insert { background-color: lightgreen; }\n          .delete { background-color: lightcoral; }\n          /* Include any additional styles from your CSS files */\n      `;\n    const fullHtml = `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n              <meta charset=\"UTF-8\">\n              <title>Generated Content</title>\n              <style>\n                  ${styles}\n              </style>\n              <link rel=\"stylesheet\" href=\"https://unpkg.com/react-diff-view/style/index.css\">\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/4.16.13/antd.min.css\">\n            </head>\n            <body>\n          </head>\n          <body>\n              ${htmlContent}\n          </body>\n          </html>\n      `;\n    const blob = new Blob([fullHtml], {\n      type: 'text/html'\n    });\n    const a = document.createElement('a');\n    a.href = URL.createObjectURL(blob);\n    a.download = 'generated_content.html';\n    a.click();\n  }, []);\n  useEffect(() => {\n    if (oldText.value && newText.value && hunks.length > 0) {\n      serializeContentToHTML();\n    }\n  }, [oldText.value, newText.value, hunks, serializeContentToHTML]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n          className: \"text\",\n          rows: 5,\n          placeholder: \"OLD CODE...\",\n          ...oldText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          className: \"text\",\n          rows: 5,\n          placeholder: \"NEW CODE...\",\n          ...newText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"diff-view\",\n      children: /*#__PURE__*/_jsxDEV(Diff, {\n        viewType: \"split\",\n        diffType: type,\n        hunks: hunks || EMPTY_HUNKS,\n        children: hunks => hunks.map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n          hunk: hunk,\n          codeEvents: codeEvents,\n          widgets: widgets\n        }, hunk.content, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 27\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"ITy1TX8t7g+xKYtnrQCnmkZoIsw=\", false, function () {\n  return [useInput, useInput, useConversations];\n});\n_c = App;\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 118,\n  columnNumber: 17\n}, this), rootElement);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ReactDOM","mapValues","Input","diffLines","formatLines","parseDiff","Diff","Hunk","getChangeKey","useInput","useConversations","Conversation","jsxDEV","_jsxDEV","EMPTY_HUNKS","App","_s","oldText","newText","type","hunks","setDiff","generateDiff","value","diffText","context","diff","nearbySequences","conversations","initConversation","addComment","codeEvents","onDoubleClick","change","key","widgets","comments","changeKey","onSubmitComment","fileName","_jsxFileName","lineNumber","columnNumber","serializeContentToHTML","contentElement","document","getElementById","htmlContent","innerHTML","styles","fullHtml","blob","Blob","a","createElement","href","URL","createObjectURL","download","click","length","children","className","TextArea","rows","placeholder","id","viewType","diffType","map","hunk","content","_c","rootElement","render","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/index.js"],"sourcesContent":["import React, {useState, useEffect,useCallback} from 'react';\nimport ReactDOM from 'react-dom';\nimport {mapValues} from 'lodash';\nimport {Input} from 'antd';\nimport {diffLines, formatLines} from 'unidiff';\nimport {parseDiff, Diff, Hunk, getChangeKey} from 'react-diff-view';\nimport {useInput} from './hooks';\nimport {useConversations, Conversation} from './comments';\n\nimport 'antd/dist/reset.css';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\n\nconst EMPTY_HUNKS = [];\n\n\nfunction App() {\n  const oldText = useInput('');\n  const newText = useInput('');\n  const [{ type, hunks }, setDiff] = useState({ type: '', hunks: EMPTY_HUNKS });\n\n  const generateDiff = useCallback(() => {\n      if (oldText.value && newText.value) {\n          const diffText = formatLines(diffLines(oldText.value, newText.value), { context: 3 });\n          const [diff] = parseDiff(diffText, { nearbySequences: 'zip' });\n          setDiff({ type: 'split', hunks: diff.hunks || EMPTY_HUNKS });\n      }\n  }, [oldText.value, newText.value]);\n\n  useEffect(() => {\n      generateDiff();\n  }, [oldText.value, newText.value, generateDiff]);\n\n  const [conversations, { initConversation, addComment }] = useConversations();\n  const codeEvents = {\n      onDoubleClick({ change }) {\n          const key = getChangeKey(change);\n          if (!conversations[key]) {\n              initConversation(key);\n          }\n      },\n  };\n\n  const widgets = mapValues(conversations, ({ comments }, changeKey) => (\n      <Conversation key={changeKey} changeKey={changeKey} comments={comments} onSubmitComment={addComment} />\n  ));\n\n  const serializeContentToHTML = useCallback(() => {\n      const contentElement = document.getElementById('diff-view');\n      if (!contentElement) {\n          return;\n      }\n      const htmlContent = contentElement.innerHTML;\n\n      // Inline styles from CSS files\n      const styles = `\n          body { font-family: Arial, sans-serif; }\n          .diff { display: flex; }\n          .hunk { margin: 10px 0; }\n          .insert { background-color: lightgreen; }\n          .delete { background-color: lightcoral; }\n          /* Include any additional styles from your CSS files */\n      `;\n      const fullHtml = `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n              <meta charset=\"UTF-8\">\n              <title>Generated Content</title>\n              <style>\n                  ${styles}\n              </style>\n              <link rel=\"stylesheet\" href=\"https://unpkg.com/react-diff-view/style/index.css\">\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/4.16.13/antd.min.css\">\n            </head>\n            <body>\n          </head>\n          <body>\n              ${htmlContent}\n          </body>\n          </html>\n      `;\n      const blob = new Blob([fullHtml], { type: 'text/html' });\n      const a = document.createElement('a');\n      a.href = URL.createObjectURL(blob);\n      a.download = 'generated_content.html';\n      a.click();\n  }, []);\n\n  useEffect(() => {\n      if (oldText.value && newText.value && hunks.length > 0) {\n          serializeContentToHTML();\n      }\n  }, [oldText.value, newText.value, hunks, serializeContentToHTML]);\n\n  return (\n      <div>\n          <header className=\"header\">\n              <div className=\"input\">\n                  <Input.TextArea className=\"text\" rows={5} placeholder=\"OLD CODE...\" {...oldText} />\n                  <Input.TextArea className=\"text\" rows={5} placeholder=\"NEW CODE...\" {...newText} />\n              </div>\n          </header>\n          <main id=\"diff-view\">\n              <Diff viewType=\"split\" diffType={type} hunks={hunks || EMPTY_HUNKS}>\n                  {hunks =>\n                      hunks.map(hunk => (\n                          <Hunk key={hunk.content} hunk={hunk} codeEvents={codeEvents} widgets={widgets} />\n                      ))\n                  }\n              </Diff>\n          </main>\n      </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}