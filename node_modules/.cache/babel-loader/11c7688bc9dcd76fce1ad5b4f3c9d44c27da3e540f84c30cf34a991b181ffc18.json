{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { parseDiff, Diff, Hunk } from 'react-diff-view';\nimport { createTwoFilesPatch } from 'diff';\nimport 'react-diff-view/style/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst oldFileContent = `\nHello, world!\nThis is a diff example.\n`;\nconst newFileContent = `\nHello, React!\nThis is a diff example.\n`;\nconst oldFileName = 'file1.txt';\nconst newFileName = 'file1.txt';\n\n// Create the unified diff string\nconst diffText = createTwoFilesPatch(oldFileName, newFileName, oldFileContent, newFileContent);\nconsole.log(parseDiff);\nfunction App() {\n  _s();\n  const [files, setFiles] = useState([]);\n  useEffect(() => {\n    try {\n      const parsedDiff = parseDiff(diffText);\n      setFiles(parsedDiff);\n    } catch (error) {\n      console.error('Error parsing diff:', error);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: files.length > 0 ? files.map(({\n      oldPath,\n      newPath,\n      hunks\n    }) => /*#__PURE__*/_jsxDEV(Diff, {\n      viewType: \"unified\",\n      diffType: \"modify\",\n      hunks: hunks,\n      children: hunks.map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n        hunk: hunk\n      }, hunk.content, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }, this))\n    }, oldPath, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No differences found or error parsing diff.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Q2RYUcr07MgGv5yVCV31YurpQrA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","parseDiff","Diff","Hunk","createTwoFilesPatch","jsxDEV","_jsxDEV","oldFileContent","newFileContent","oldFileName","newFileName","diffText","console","log","App","_s","files","setFiles","parsedDiff","error","className","children","length","map","oldPath","newPath","hunks","viewType","diffType","hunk","content","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { parseDiff, Diff, Hunk } from 'react-diff-view';\nimport { createTwoFilesPatch } from 'diff';\nimport 'react-diff-view/style/index.css';\n\nconst oldFileContent = `\nHello, world!\nThis is a diff example.\n`;\n\nconst newFileContent = `\nHello, React!\nThis is a diff example.\n`;\n\nconst oldFileName = 'file1.txt';\nconst newFileName = 'file1.txt';\n\n// Create the unified diff string\nconst diffText = createTwoFilesPatch(oldFileName, newFileName, oldFileContent, newFileContent);\nconsole.log(parseDiff);\nfunction App() {\n  const [files, setFiles] = useState([]);\n\n  useEffect(() => {\n    try {\n      const parsedDiff = parseDiff(diffText);\n      setFiles(parsedDiff);\n    } catch (error) {\n      console.error('Error parsing diff:', error);\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {files.length > 0 ? (\n        files.map(({ oldPath, newPath, hunks }) => (\n          <Diff key={oldPath} viewType=\"unified\" diffType=\"modify\" hunks={hunks}>\n            {hunks.map(hunk => (\n              <Hunk key={hunk.content} hunk={hunk} />\n            ))}\n          </Diff>\n        ))\n      ) : (\n        <p>No differences found or error parsing diff.</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,EAAEC,IAAI,QAAQ,iBAAiB;AACvD,SAASC,mBAAmB,QAAQ,MAAM;AAC1C,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,cAAc,GAAG;AACvB;AACA;AACA,CAAC;AAED,MAAMC,cAAc,GAAG;AACvB;AACA;AACA,CAAC;AAED,MAAMC,WAAW,GAAG,WAAW;AAC/B,MAAMC,WAAW,GAAG,WAAW;;AAE/B;AACA,MAAMC,QAAQ,GAAGP,mBAAmB,CAACK,WAAW,EAAEC,WAAW,EAAEH,cAAc,EAAEC,cAAc,CAAC;AAC9FI,OAAO,CAACC,GAAG,CAACZ,SAAS,CAAC;AACtB,SAASa,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMkB,UAAU,GAAGjB,SAAS,CAACU,QAAQ,CAAC;MACtCM,QAAQ,CAACC,UAAU,CAAC;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA;IAAKc,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBL,KAAK,CAACM,MAAM,GAAG,CAAC,GACfN,KAAK,CAACO,GAAG,CAAC,CAAC;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAM,CAAC,kBACpCpB,OAAA,CAACJ,IAAI;MAAeyB,QAAQ,EAAC,SAAS;MAACC,QAAQ,EAAC,QAAQ;MAACF,KAAK,EAAEA,KAAM;MAAAL,QAAA,EACnEK,KAAK,CAACH,GAAG,CAACM,IAAI,iBACbvB,OAAA,CAACH,IAAI;QAAoB0B,IAAI,EAAEA;MAAK,GAAzBA,IAAI,CAACC,OAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CACvC;IAAC,GAHOV,OAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIZ,CACP,CAAC,gBAEF5B,OAAA;MAAAe,QAAA,EAAG;IAA2C;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAClD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CA3BQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA6BZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}