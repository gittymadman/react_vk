{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { mapValues } from 'lodash';\nimport { Input, Button } from 'antd';\nimport { diffLines, formatLines } from 'unidiff';\nimport { parseDiff, Diff, Hunk, getChangeKey } from 'react-diff-view';\nimport { useInput } from './hooks';\nimport { useConversations, Conversation } from './comments';\nimport 'antd/dist/reset.css';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_HUNKS = [];\nfunction App() {\n  _s();\n  const oldText = useInput('');\n  const newText = useInput('');\n  const [{\n    type,\n    hunks\n  }, setDiff] = useState('');\n  const generateHTMLContent = useCallback(() => {\n    // Calculate diff and format lines\n    const diffText = formatLines(diffLines(oldText.value, newText.value), {\n      context: 3\n    });\n    const parsedDiff = parseDiff(diffText, {\n      nearbySequences: 'zip'\n    });\n\n    // Ensure parsedDiff.hunks is an array\n    const diffHunks = parsedDiff && Array.isArray(parsedDiff.hunks) ? parsedDiff.hunks : [];\n\n    // Generate HTML for each hunk\n    const diffViewHtml = diffHunks.map((hunk, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: hunk.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: hunk.changes.map((change, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: change.type,\n          children: change.content\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this));\n\n    // Construct the complete HTML content\n    const htmlContent = `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n              <meta charset=\"UTF-8\">\n              <title>Generated Diff View</title>\n              <style>\n                  body { font-family: Arial, sans-serif; }\n                  /* Include any specific styles required for your diff view */\n                  .insert { background-color: lightgreen; }\n                  .delete { background-color: lightcoral; }\n              </style>\n          </head>\n          <body>\n              <header>\n                  <h1>Generated Diff View</h1>\n              </header>\n              <main>\n                  ${diffViewHtml.join('')}\n              </main>\n          </body>\n          </html>\n      `;\n    return htmlContent;\n  }, [oldText.value, newText.value]);\n  const updateDiffText = useCallback(() => {\n    const diffText = formatLines(diffLines(oldText.value, newText.value), {\n      context: 3\n    });\n    const [diff] = parseDiff(diffText, {\n      nearbySequences: 'zip'\n    });\n    setDiff(diff);\n  }, [oldText.value, newText.value, setDiff]);\n  const [conversations, {\n    initConversation,\n    addComment\n  }] = useConversations();\n  const codeEvents = {\n    onDoubleClick({\n      change\n    }) {\n      const key = getChangeKey(change);\n      if (!conversations[key]) {\n        initConversation(key);\n      }\n    }\n  };\n  const widgets = mapValues(conversations, ({\n    comments\n  }, changeKey) => /*#__PURE__*/_jsxDEV(Conversation, {\n    changeKey: changeKey,\n    comments: comments,\n    onSubmitComment: addComment\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this));\n  const handleCopyHTML = () => {\n    const htmlContent = generateHTMLContent();\n    navigator.clipboard.writeText(htmlContent).then(() => alert('HTML content copied to clipboard')).catch(err => console.error('Could not copy HTML content: ', err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n          className: \"text\",\n          rows: 5,\n          placeholder: \"OLD CODE...\",\n          ...oldText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          className: \"text\",\n          rows: 5,\n          placeholder: \"NEW CODE...\",\n          ...newText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        id: \"button\",\n        onClick: handleCopyHTML,\n        children: \"Download as html\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"submit\",\n        type: \"primary\",\n        onClick: updateDiffText,\n        children: \"GENERATE DIFFERENCE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(Diff, {\n        viewType: \"split\",\n        diffType: type,\n        hunks: hunks || EMPTY_HUNKS,\n        children: hunks => hunks.map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n          hunk: hunk,\n          codeEvents: codeEvents,\n          widgets: widgets\n        }, hunk.content, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"zxn2jUlGpI+9bC6BZSCcQrcVPHw=\", false, function () {\n  return [useInput, useInput, useConversations];\n});\n_c = App;\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 120,\n  columnNumber: 17\n}, this), rootElement);\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","ReactDOM","mapValues","Input","Button","diffLines","formatLines","parseDiff","Diff","Hunk","getChangeKey","useInput","useConversations","Conversation","jsxDEV","_jsxDEV","EMPTY_HUNKS","App","_s","oldText","newText","type","hunks","setDiff","generateHTMLContent","diffText","value","context","parsedDiff","nearbySequences","diffHunks","Array","isArray","diffViewHtml","map","hunk","index","children","content","fileName","_jsxFileName","lineNumber","columnNumber","changes","change","idx","className","htmlContent","join","updateDiffText","diff","conversations","initConversation","addComment","codeEvents","onDoubleClick","key","widgets","comments","changeKey","onSubmitComment","handleCopyHTML","navigator","clipboard","writeText","then","alert","catch","err","console","error","TextArea","rows","placeholder","color","id","onClick","viewType","diffType","_c","rootElement","document","getElementById","render","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/index.js"],"sourcesContent":["import React, {useState, useCallback} from 'react';\nimport ReactDOM from 'react-dom';\nimport {mapValues} from 'lodash';\nimport {Input, Button} from 'antd';\nimport {diffLines, formatLines} from 'unidiff';\nimport {parseDiff, Diff, Hunk, getChangeKey} from 'react-diff-view';\nimport {useInput} from './hooks';\nimport {useConversations, Conversation} from './comments';\n\nimport 'antd/dist/reset.css';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\n\nconst EMPTY_HUNKS = [];\n\n\n\nfunction App() {\n    const oldText = useInput('');\n    const newText = useInput('');\n    const [{type, hunks}, setDiff] = useState('');\n\n    const generateHTMLContent = useCallback(() => {\n      // Calculate diff and format lines\n      const diffText = formatLines(diffLines(oldText.value, newText.value), { context: 3 });\n      const parsedDiff = parseDiff(diffText, { nearbySequences: 'zip' });\n\n      // Ensure parsedDiff.hunks is an array\n      const diffHunks = parsedDiff && Array.isArray(parsedDiff.hunks) ? parsedDiff.hunks : [];\n\n      // Generate HTML for each hunk\n      const diffViewHtml = diffHunks.map((hunk, index) => (\n          <div key={index}>\n              <h3>{hunk.content}</h3>\n              <pre>\n                  {hunk.changes.map((change, idx) => (\n                      <span key={idx} className={change.type}>{change.content}</span>\n                  ))}\n              </pre>\n          </div>\n      ));\n\n      // Construct the complete HTML content\n      const htmlContent = `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n              <meta charset=\"UTF-8\">\n              <title>Generated Diff View</title>\n              <style>\n                  body { font-family: Arial, sans-serif; }\n                  /* Include any specific styles required for your diff view */\n                  .insert { background-color: lightgreen; }\n                  .delete { background-color: lightcoral; }\n              </style>\n          </head>\n          <body>\n              <header>\n                  <h1>Generated Diff View</h1>\n              </header>\n              <main>\n                  ${diffViewHtml.join('')}\n              </main>\n          </body>\n          </html>\n      `;\n\n      return htmlContent;\n  }, [oldText.value, newText.value]);\n    const updateDiffText = useCallback(() => {\n        const diffText = formatLines(diffLines(oldText.value, newText.value), {context: 3});\n        const [diff] = parseDiff(diffText, {nearbySequences: 'zip'});\n        setDiff(diff);\n    }, [oldText.value, newText.value, setDiff]);\n    const [conversations, {initConversation, addComment}] = useConversations();\n    const codeEvents = {\n        onDoubleClick({change}) {\n            const key = getChangeKey(change);\n            if (!conversations[key]) {\n                initConversation(key);\n            }\n        },\n    };\n    const widgets = mapValues(conversations, ({comments}, changeKey) => (\n        <Conversation changeKey={changeKey} comments={comments} onSubmitComment={addComment} />\n    ));\n    const handleCopyHTML = () => {\n      const htmlContent = generateHTMLContent();\n      navigator.clipboard.writeText(htmlContent)\n          .then(() => alert('HTML content copied to clipboard'))\n          .catch(err => console.error('Could not copy HTML content: ', err));\n  };  \n    return (\n        <div>\n            <header className=\"header\">\n                <div className=\"input\">\n                    <Input.TextArea className=\"text\" rows={5} placeholder=\"OLD CODE...\" {...oldText} /> \n                    <Input.TextArea className=\"text\" rows={5} placeholder=\"NEW CODE...\" {...newText} />\n                </div>\n                <Button color='green' id=\"button\" onClick={handleCopyHTML}>Download as html</Button>\n\n                <Button className=\"submit\" type=\"primary\" onClick={updateDiffText}>\n                    GENERATE DIFFERENCE\n                </Button>\n            </header>\n            <main>\n                <Diff viewType=\"split\" diffType={type} hunks={hunks || EMPTY_HUNKS}>\n                    {hunks =>\n                        hunks.map(hunk => (\n                            <Hunk key={hunk.content} hunk={hunk} codeEvents={codeEvents} widgets={widgets} />\n                        ))\n                    }\n                </Diff>\n            </main>\n        </div>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}