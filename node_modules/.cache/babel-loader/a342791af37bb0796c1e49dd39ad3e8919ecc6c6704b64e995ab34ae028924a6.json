{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst oldCode = `\nfunction MyComponent() {\n  return <div>Hello, old world!</div>;\n}\n`;\nconst newCode = `\nfunction MyComponent() {\n  return <div>Hello, new world!</div>;\n}\n`;\nconst diffText = `\n--- oldCode\n+++ newCode\n@@ -1,5 +1,5 @@\n function MyComponent() {\n-  return <div>Hello, old world!</div>;\n+  return <div>Hello, new world!</div>;\n }\n`;\nconst DiffViewer = () => {\n  _s();\n  const [diff, setDiff] = useState(null);\n  useEffect(() => {\n    const parsedDiff = parseDiff(diffText);\n    if (parsedDiff && parsedDiff.length > 0) {\n      setDiff(parsedDiff[0]); // Assuming parseDiff returns an array; adjust if necessary\n    } else {\n      console.error('Failed to parse diff:', parsedDiff);\n    }\n  }, []);\n  if (!diff || !diff.hunks) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Failed to parse diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Diff, {\n    viewType: \"split\",\n    diff: diff,\n    children: ({\n      hunks\n    }) => hunks.map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n      hunk: hunk\n    }, hunk.content, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(DiffViewer, \"dXIWidWjh92ekWrD3f2FgQiltCA=\");\n_c = DiffViewer;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Diff Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiffViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DiffViewer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Diff","Hunk","parseDiff","jsxDEV","_jsxDEV","oldCode","newCode","diffText","DiffViewer","_s","diff","setDiff","parsedDiff","length","console","error","hunks","children","fileName","_jsxFileName","lineNumber","columnNumber","viewType","map","hunk","content","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\n\nconst oldCode = `\nfunction MyComponent() {\n  return <div>Hello, old world!</div>;\n}\n`;\n\nconst newCode = `\nfunction MyComponent() {\n  return <div>Hello, new world!</div>;\n}\n`;\n\nconst diffText = `\n--- oldCode\n+++ newCode\n@@ -1,5 +1,5 @@\n function MyComponent() {\n-  return <div>Hello, old world!</div>;\n+  return <div>Hello, new world!</div>;\n }\n`;\n\nconst DiffViewer = () => {\n  const [diff, setDiff] = useState(null);\n\n  useEffect(() => {\n    const parsedDiff = parseDiff(diffText);\n    if (parsedDiff && parsedDiff.length > 0) {\n      setDiff(parsedDiff[0]); // Assuming parseDiff returns an array; adjust if necessary\n    } else {\n      console.error('Failed to parse diff:', parsedDiff);\n    }\n  }, []);\n\n  if (!diff || !diff.hunks) {\n    return <div>Failed to parse diff</div>;\n  }\n\n  return (\n    <Diff viewType=\"split\" diff={diff}>\n      {({ hunks }) => hunks.map(hunk => (\n        <Hunk key={hunk.content} hunk={hunk} />\n      ))}\n    </Diff>\n  );\n};\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Code Diff Viewer</h1>\n      <DiffViewer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,OAAO,GAAG;AAChB;AACA;AACA;AACA,CAAC;AAED,MAAMC,OAAO,GAAG;AAChB;AACA;AACA;AACA,CAAC;AAED,MAAMC,QAAQ,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAGV,SAAS,CAACK,QAAQ,CAAC;IACtC,IAAIK,UAAU,IAAIA,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MACvCF,OAAO,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLE,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEH,UAAU,CAAC;IACpD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,CAACM,KAAK,EAAE;IACxB,oBAAOZ,OAAA;MAAAa,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,oBACEjB,OAAA,CAACJ,IAAI;IAACsB,QAAQ,EAAC,OAAO;IAACZ,IAAI,EAAEA,IAAK;IAAAO,QAAA,EAC/BA,CAAC;MAAED;IAAM,CAAC,KAAKA,KAAK,CAACO,GAAG,CAACC,IAAI,iBAC5BpB,OAAA,CAACH,IAAI;MAAoBuB,IAAI,EAAEA;IAAK,GAAzBA,IAAI,CAACC,OAAO;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACZ,EAAA,CAvBID,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AAyBhB,MAAMmB,GAAG,GAAGA,CAAA,KAAM;EAChB,oBACEvB,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBjB,OAAA,CAACI,UAAU;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACO,GAAA,GAPID,GAAG;AAST,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}