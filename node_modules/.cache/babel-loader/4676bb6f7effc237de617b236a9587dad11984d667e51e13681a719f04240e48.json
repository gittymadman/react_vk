{"ast":null,"code":"import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { createContext, useContext, memo, useMemo, useState, useCallback, useRef, Children, useReducer, useEffect } from \"react\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty$1(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty$1(obj, key, value) {\n  return (key = function (arg) {\n    var key = function (input, hint) {\n      if (\"object\" != typeof input || null === input) return input;\n      var prim = input[Symbol.toPrimitive];\n      if (void 0 !== prim) {\n        var res = prim.call(input, hint || \"default\");\n        if (\"object\" != typeof res) return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n      }\n      return (\"string\" === hint ? String : Number)(input);\n    }(arg, \"string\");\n    return \"symbol\" == typeof key ? key : String(key);\n  }(key)) in obj ? Object.defineProperty(obj, key, {\n    value: value,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : obj[key] = value, obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (null == source) return {};\n  var key,\n    i,\n    target = function (source, excluded) {\n      if (null == source) return {};\n      var key,\n        i,\n        target = {},\n        sourceKeys = Object.keys(source);\n      for (i = 0; i < sourceKeys.length; i++) key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);\n      return target;\n    }(source, excluded);\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) key = sourceSymbolKeys[i], excluded.indexOf(key) >= 0 || Object.prototype.propertyIsEnumerable.call(source, key) && (target[key] = source[key]);\n  }\n  return target;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || function (r, l) {\n    var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n    if (null != t) {\n      var e,\n        n,\n        i,\n        u,\n        a = [],\n        f = !0,\n        o = !1;\n      try {\n        if (i = (t = t.call(r)).next, 0 === l) {\n          if (Object(t) !== t) return;\n          f = !1;\n        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n      } catch (r) {\n        o = !0, n = r;\n      } finally {\n        try {\n          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n        } finally {\n          if (o) throw n;\n        }\n      }\n      return a;\n    }\n  }(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return function (arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || function () {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (\"undefined\" != typeof Symbol && null != iter[Symbol.iterator] || null != iter[\"@@iterator\"]) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (o) {\n    if (\"string\" == typeof o) return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    return \"Object\" === n && o.constructor && (n = o.constructor.name), \"Map\" === n || \"Set\" === n ? Array.from(o) : \"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? _arrayLikeToArray(o, minLen) : void 0;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  (null == len || len > arr.length) && (len = arr.length);\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = \"undefined\" != typeof Symbol && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && \"number\" == typeof o.length) {\n      it && (o = it);\n      var i = 0,\n        F = function () {};\n      return {\n        s: F,\n        n: function () {\n          return i >= o.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var err,\n    normalCompletion = !0,\n    didErr = !1;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      return normalCompletion = step.done, step;\n    },\n    e: function (e) {\n      didErr = !0, err = e;\n    },\n    f: function () {\n      try {\n        normalCompletion || null == it.return || it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nvar commonjsGlobal = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction createCommonjsModule(fn, module) {\n  return fn(module = {\n    exports: {}\n  }, module.exports), module.exports;\n}\nvar classnames = createCommonjsModule(function (module) {\n    /*!\n    \tCopyright (c) 2018 Jed Watson.\n    \tLicensed under the MIT License (MIT), see\n    \thttp://jedwatson.github.io/classnames\n    */\n    !function () {\n      var hasOwn = {}.hasOwnProperty;\n      function classNames() {\n        for (var classes = [], i = 0; i < arguments.length; i++) {\n          var arg = arguments[i];\n          if (arg) {\n            var argType = typeof arg;\n            if (\"string\" === argType || \"number\" === argType) classes.push(arg);else if (Array.isArray(arg)) {\n              if (arg.length) {\n                var inner = classNames.apply(null, arg);\n                inner && classes.push(inner);\n              }\n            } else if (\"object\" === argType) {\n              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes(\"[native code]\")) {\n                classes.push(arg.toString());\n                continue;\n              }\n              for (var key in arg) hasOwn.call(arg, key) && arg[key] && classes.push(key);\n            }\n          }\n        }\n        return classes.join(\" \");\n      }\n      module.exports ? (classNames.default = classNames, module.exports = classNames) : window.classNames = classNames;\n    }();\n  }),\n  DEFAULT_CONTEXT_VALUE = {\n    hunkClassName: \"\",\n    lineClassName: \"\",\n    gutterClassName: \"\",\n    codeClassName: \"\",\n    monotonous: !1,\n    gutterType: \"default\",\n    viewType: \"split\",\n    widgets: {},\n    hideGutter: !1,\n    selectedChanges: [],\n    generateAnchorID: function () {},\n    renderGutter: function (_ref) {\n      var renderDefault = _ref.renderDefault;\n      return (0, _ref.wrapInAnchor)(renderDefault());\n    },\n    codeEvents: {},\n    gutterEvents: {}\n  },\n  ContextType = createContext(DEFAULT_CONTEXT_VALUE),\n  Provider = ContextType.Provider,\n  useDiffSettings = function () {\n    return useContext(ContextType);\n  },\n  gitdiffParser = createCommonjsModule(function (module, exports) {\n    !function (root) {\n      function parsePathFromFirstLine(line) {\n        var filesStr = line.slice(11),\n          oldPath = null,\n          newPath = null;\n        switch (filesStr.indexOf('\"')) {\n          case -1:\n            oldPath = (segs = filesStr.split(\" \"))[0].slice(2), newPath = segs[1].slice(2);\n            break;\n          case 0:\n            var nextQuoteIndex = filesStr.indexOf('\"', 2);\n            oldPath = filesStr.slice(3, nextQuoteIndex);\n            var newQuoteIndex = filesStr.indexOf('\"', nextQuoteIndex + 1);\n            newPath = newQuoteIndex < 0 ? filesStr.slice(nextQuoteIndex + 4) : filesStr.slice(newQuoteIndex + 3, -1);\n            break;\n          default:\n            var segs;\n            oldPath = (segs = filesStr.split(\" \"))[0].slice(2), newPath = segs[1].slice(3, -1);\n        }\n        return {\n          oldPath: oldPath,\n          newPath: newPath\n        };\n      }\n      var parser = {\n        parse: function (source) {\n          for (var currentInfo, currentHunk, changeOldLine, changeNewLine, paths, infos = [], stat = 2, lines = source.split(\"\\n\"), linesLen = lines.length, i = 0; i < linesLen;) {\n            var line = lines[i];\n            if (0 === line.indexOf(\"diff --git\")) {\n              currentInfo = {\n                hunks: [],\n                oldEndingNewLine: !0,\n                newEndingNewLine: !0,\n                oldPath: (paths = parsePathFromFirstLine(line)).oldPath,\n                newPath: paths.newPath\n              }, infos.push(currentInfo);\n              var simiLine,\n                currentInfoType = null;\n              simiLoop: for (; simiLine = lines[++i];) {\n                var spaceIndex = simiLine.indexOf(\" \"),\n                  infoType = spaceIndex > -1 ? simiLine.slice(0, spaceIndex) : infoType;\n                switch (infoType) {\n                  case \"diff\":\n                    i--;\n                    break simiLoop;\n                  case \"deleted\":\n                  case \"new\":\n                    var leftStr = simiLine.slice(spaceIndex + 1);\n                    0 === leftStr.indexOf(\"file mode\") && (currentInfo[\"new\" === infoType ? \"newMode\" : \"oldMode\"] = leftStr.slice(10));\n                    break;\n                  case \"similarity\":\n                    currentInfo.similarity = parseInt(simiLine.split(\" \")[2], 10);\n                    break;\n                  case \"index\":\n                    var segs = simiLine.slice(spaceIndex + 1).split(\" \"),\n                      revs = segs[0].split(\"..\");\n                    currentInfo.oldRevision = revs[0], currentInfo.newRevision = revs[1], segs[1] && (currentInfo.oldMode = currentInfo.newMode = segs[1]);\n                    break;\n                  case \"copy\":\n                  case \"rename\":\n                    var infoStr = simiLine.slice(spaceIndex + 1);\n                    0 === infoStr.indexOf(\"from\") ? currentInfo.oldPath = infoStr.slice(5) : currentInfo.newPath = infoStr.slice(3), currentInfoType = infoType;\n                    break;\n                  case \"---\":\n                    var oldPath = simiLine.slice(spaceIndex + 1),\n                      newPath = lines[++i].slice(4);\n                    \"/dev/null\" === oldPath ? (newPath = newPath.slice(2), currentInfoType = \"add\") : \"/dev/null\" === newPath ? (oldPath = oldPath.slice(2), currentInfoType = \"delete\") : (currentInfoType = \"modify\", oldPath = oldPath.slice(2), newPath = newPath.slice(2)), oldPath && (currentInfo.oldPath = oldPath), newPath && (currentInfo.newPath = newPath), stat = 5;\n                    break simiLoop;\n                }\n              }\n              currentInfo.type = currentInfoType || \"modify\";\n            } else if (0 === line.indexOf(\"Binary\")) currentInfo.isBinary = !0, currentInfo.type = line.indexOf(\"/dev/null and\") >= 0 ? \"add\" : line.indexOf(\"and /dev/null\") >= 0 ? \"delete\" : \"modify\", stat = 2, currentInfo = null;else if (5 === stat) if (0 === line.indexOf(\"@@\")) {\n              var match = /^@@\\s+-([0-9]+)(,([0-9]+))?\\s+\\+([0-9]+)(,([0-9]+))?/.exec(line);\n              currentHunk = {\n                content: line,\n                oldStart: match[1] - 0,\n                newStart: match[4] - 0,\n                oldLines: match[3] - 0 || 1,\n                newLines: match[6] - 0 || 1,\n                changes: []\n              }, currentInfo.hunks.push(currentHunk), changeOldLine = currentHunk.oldStart, changeNewLine = currentHunk.newStart;\n            } else {\n              var typeChar = line.slice(0, 1),\n                change = {\n                  content: line.slice(1)\n                };\n              switch (typeChar) {\n                case \"+\":\n                  change.type = \"insert\", change.isInsert = !0, change.lineNumber = changeNewLine, changeNewLine++;\n                  break;\n                case \"-\":\n                  change.type = \"delete\", change.isDelete = !0, change.lineNumber = changeOldLine, changeOldLine++;\n                  break;\n                case \" \":\n                  change.type = \"normal\", change.isNormal = !0, change.oldLineNumber = changeOldLine, change.newLineNumber = changeNewLine, changeOldLine++, changeNewLine++;\n                  break;\n                case \"\\\\\":\n                  var lastChange = currentHunk.changes[currentHunk.changes.length - 1];\n                  lastChange.isDelete || (currentInfo.newEndingNewLine = !1), lastChange.isInsert || (currentInfo.oldEndingNewLine = !1);\n              }\n              change.type && currentHunk.changes.push(change);\n            }\n            i++;\n          }\n          return infos;\n        }\n      };\n      module.exports = parser;\n    }();\n  });\nfunction isInsert(change) {\n  return \"insert\" === change.type;\n}\nfunction isDelete(change) {\n  return \"delete\" === change.type;\n}\nfunction isNormal(change) {\n  return \"normal\" === change.type;\n}\nfunction mapHunk(hunk, options) {\n  var changes = \"zip\" === options.nearbySequences ? function (changes) {\n    var _changes$reduce = changes.reduce(function (_ref, current, i) {\n      var _ref2 = _slicedToArray(_ref, 3),\n        result = _ref2[0],\n        last = _ref2[1],\n        lastDeletionIndex = _ref2[2];\n      return last ? isInsert(current) && lastDeletionIndex >= 0 ? (result.splice(lastDeletionIndex + 1, 0, current), [result, current, lastDeletionIndex + 2]) : (result.push(current), [result, current, isDelete(current) && isDelete(last) ? lastDeletionIndex : i]) : (result.push(current), [result, current, isDelete(current) ? i : -1]);\n    }, [[], null, -1]);\n    return _slicedToArray(_changes$reduce, 1)[0];\n  }(hunk.changes) : hunk.changes;\n  return _objectSpread2(_objectSpread2({}, hunk), {}, {\n    isPlain: !1,\n    changes: changes\n  });\n}\nfunction parseDiff(text) {\n  var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n    diffText = function (text) {\n      if (text.startsWith(\"diff --git\")) return text;\n      var indexOfFirstLineBreak = text.indexOf(\"\\n\"),\n        indexOfSecondLineBreak = text.indexOf(\"\\n\", indexOfFirstLineBreak + 1),\n        firstLine = text.slice(0, indexOfFirstLineBreak),\n        secondLine = text.slice(indexOfFirstLineBreak + 1, indexOfSecondLineBreak),\n        oldPath = firstLine.split(\" \").slice(1, -3).join(\" \"),\n        newPath = secondLine.split(\" \").slice(1, -3).join(\" \");\n      return [\"diff --git a/\".concat(oldPath, \" b/\").concat(newPath), \"index 1111111..2222222 100644\", \"--- a/\".concat(oldPath), \"+++ b/\".concat(newPath), text.slice(indexOfSecondLineBreak + 1)].join(\"\\n\");\n    }(text.trimStart());\n  return gitdiffParser.parse(diffText).map(function (file) {\n    return function (file, options) {\n      var hunks = file.hunks.map(function (hunk) {\n        return mapHunk(hunk, options);\n      });\n      return _objectSpread2(_objectSpread2({}, file), {}, {\n        hunks: hunks\n      });\n    }(file, options);\n  });\n}\nfunction first(array) {\n  return array[0];\n}\nfunction last$1(array) {\n  return array[array.length - 1];\n}\nfunction sideToProperty(side) {\n  return [\"\".concat(side, \"Start\"), \"\".concat(side, \"Lines\")];\n}\nfunction computeLineNumberFactory(side) {\n  return \"old\" === side ? function (change) {\n    return isInsert(change) ? -1 : isNormal(change) ? change.oldLineNumber : change.lineNumber;\n  } : function (change) {\n    return isDelete(change) ? -1 : isNormal(change) ? change.newLineNumber : change.lineNumber;\n  };\n}\nfunction isInHunkFactory(startProperty, linesProperty) {\n  return function (hunk, lineNumber) {\n    var start = hunk[startProperty],\n      end = start + hunk[linesProperty];\n    return lineNumber >= start && lineNumber < end;\n  };\n}\nfunction isBetweenHunksFactory(startProperty, linesProperty) {\n  return function (previousHunk, nextHunk, lineNumber) {\n    var start = previousHunk[startProperty] + previousHunk[linesProperty],\n      end = nextHunk[startProperty];\n    return lineNumber >= start && lineNumber < end;\n  };\n}\nfunction findChangeByLineNumberFactory(side) {\n  var computeLineNumber = computeLineNumberFactory(side),\n    findContainerHunk = function (side) {\n      var _sideToProperty2 = _slicedToArray(sideToProperty(side), 2),\n        isInHunk = isInHunkFactory(_sideToProperty2[0], _sideToProperty2[1]);\n      return function (hunks, lineNumber) {\n        return hunks.find(function (hunk) {\n          return isInHunk(hunk, lineNumber);\n        });\n      };\n    }(side);\n  return function (hunks, lineNumber) {\n    var containerHunk = findContainerHunk(hunks, lineNumber);\n    if (containerHunk) return containerHunk.changes.find(function (change) {\n      return computeLineNumber(change) === lineNumber;\n    });\n  };\n}\nfunction getCorrespondingLineNumberFactory(baseSide) {\n  var anotherSide = \"old\" === baseSide ? \"new\" : \"old\",\n    _sideToProperty4 = _slicedToArray(sideToProperty(baseSide), 2),\n    baseStart = _sideToProperty4[0],\n    baseLines = _sideToProperty4[1],\n    _sideToProperty6 = _slicedToArray(sideToProperty(anotherSide), 2),\n    correspondingStart = _sideToProperty6[0],\n    correspondingLines = _sideToProperty6[1],\n    baseLineNumber = computeLineNumberFactory(baseSide),\n    correspondingLineNumber = computeLineNumberFactory(anotherSide),\n    isInHunk = isInHunkFactory(baseStart, baseLines),\n    isBetweenHunks = isBetweenHunksFactory(baseStart, baseLines);\n  return function (hunks, lineNumber) {\n    var firstHunk = first(hunks);\n    if (lineNumber < firstHunk[baseStart]) {\n      var spanFromStart = firstHunk[baseStart] - lineNumber;\n      return firstHunk[correspondingStart] - spanFromStart;\n    }\n    var lastHunk = last$1(hunks);\n    if (lastHunk[baseStart] + lastHunk[baseLines] <= lineNumber) {\n      var spanFromEnd = lineNumber - lastHunk[baseStart] - lastHunk[baseLines];\n      return lastHunk[correspondingStart] + lastHunk[correspondingLines] + spanFromEnd;\n    }\n    for (var i = 0; i < hunks.length; i++) {\n      var currentHunk = hunks[i],\n        nextHunk = hunks[i + 1];\n      if (isInHunk(currentHunk, lineNumber)) {\n        var changeIndex = currentHunk.changes.findIndex(function (change) {\n            return baseLineNumber(change) === lineNumber;\n          }),\n          change = currentHunk.changes[changeIndex];\n        if (isNormal(change)) return correspondingLineNumber(change);\n        var possibleCorrespondingChangeIndex = isDelete(change) ? changeIndex + 1 : changeIndex - 1,\n          possibleCorrespondingChange = currentHunk.changes[possibleCorrespondingChangeIndex];\n        if (!possibleCorrespondingChange) return -1;\n        var negativeChangeType = isInsert(change) ? \"delete\" : \"insert\";\n        return possibleCorrespondingChange.type === negativeChangeType ? correspondingLineNumber(possibleCorrespondingChange) : -1;\n      }\n      if (isBetweenHunks(currentHunk, nextHunk, lineNumber)) {\n        var _spanFromEnd = lineNumber - currentHunk[baseStart] - currentHunk[baseLines];\n        return currentHunk[correspondingStart] + currentHunk[correspondingLines] + _spanFromEnd;\n      }\n    }\n    throw new Error(\"Unexpected line position \".concat(lineNumber));\n  };\n}\nvar _baseFindIndex = function (array, predicate, fromIndex, fromRight) {\n  for (var length = array.length, index = fromIndex + (fromRight ? 1 : -1); fromRight ? index-- : ++index < length;) if (predicate(array[index], index, array)) return index;\n  return -1;\n};\nvar _listCacheClear = function () {\n  this.__data__ = [], this.size = 0;\n};\nvar eq_1 = function (value, other) {\n  return value === other || value != value && other != other;\n};\nvar _assocIndexOf = function (array, key) {\n    for (var length = array.length; length--;) if (eq_1(array[length][0], key)) return length;\n    return -1;\n  },\n  splice = Array.prototype.splice;\nvar _listCacheDelete = function (key) {\n  var data = this.__data__,\n    index = _assocIndexOf(data, key);\n  return !(index < 0) && (index == data.length - 1 ? data.pop() : splice.call(data, index, 1), --this.size, !0);\n};\nvar _listCacheGet = function (key) {\n  var data = this.__data__,\n    index = _assocIndexOf(data, key);\n  return index < 0 ? void 0 : data[index][1];\n};\nvar _listCacheHas = function (key) {\n  return _assocIndexOf(this.__data__, key) > -1;\n};\nvar _listCacheSet = function (key, value) {\n  var data = this.__data__,\n    index = _assocIndexOf(data, key);\n  return index < 0 ? (++this.size, data.push([key, value])) : data[index][1] = value, this;\n};\nfunction ListCache(entries) {\n  var index = -1,\n    length = null == entries ? 0 : entries.length;\n  for (this.clear(); ++index < length;) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\nListCache.prototype.clear = _listCacheClear, ListCache.prototype.delete = _listCacheDelete, ListCache.prototype.get = _listCacheGet, ListCache.prototype.has = _listCacheHas, ListCache.prototype.set = _listCacheSet;\nvar _ListCache = ListCache;\nvar _stackClear = function () {\n  this.__data__ = new _ListCache(), this.size = 0;\n};\nvar _stackDelete = function (key) {\n  var data = this.__data__,\n    result = data.delete(key);\n  return this.size = data.size, result;\n};\nvar _stackGet = function (key) {\n  return this.__data__.get(key);\n};\nvar _stackHas = function (key) {\n    return this.__data__.has(key);\n  },\n  _freeGlobal = \"object\" == typeof commonjsGlobal && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal,\n  freeSelf = \"object\" == typeof self && self && self.Object === Object && self,\n  _root = _freeGlobal || freeSelf || Function(\"return this\")(),\n  _Symbol = _root.Symbol,\n  objectProto$d = Object.prototype,\n  hasOwnProperty$a = objectProto$d.hasOwnProperty,\n  nativeObjectToString$1 = objectProto$d.toString,\n  symToStringTag$1 = _Symbol ? _Symbol.toStringTag : void 0;\nvar _getRawTag = function (value) {\n    var isOwn = hasOwnProperty$a.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n    try {\n      value[symToStringTag$1] = void 0;\n      var unmasked = !0;\n    } catch (e) {}\n    var result = nativeObjectToString$1.call(value);\n    return unmasked && (isOwn ? value[symToStringTag$1] = tag : delete value[symToStringTag$1]), result;\n  },\n  nativeObjectToString = Object.prototype.toString;\nvar _objectToString = function (value) {\n    return nativeObjectToString.call(value);\n  },\n  symToStringTag = _Symbol ? _Symbol.toStringTag : void 0;\nvar _baseGetTag = function (value) {\n  return null == value ? void 0 === value ? \"[object Undefined]\" : \"[object Null]\" : symToStringTag && symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);\n};\nvar isObject_1 = function (value) {\n  var type = typeof value;\n  return null != value && (\"object\" == type || \"function\" == type);\n};\nvar isFunction_1 = function (value) {\n    if (!isObject_1(value)) return !1;\n    var tag = _baseGetTag(value);\n    return \"[object Function]\" == tag || \"[object GeneratorFunction]\" == tag || \"[object AsyncFunction]\" == tag || \"[object Proxy]\" == tag;\n  },\n  _coreJsData = _root[\"__core-js_shared__\"],\n  maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n  }();\nvar _isMasked = function (func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  },\n  funcToString$1 = Function.prototype.toString;\nvar _toSource = function (func) {\n    if (null != func) {\n      try {\n        return funcToString$1.call(func);\n      } catch (e) {}\n      try {\n        return func + \"\";\n      } catch (e) {}\n    }\n    return \"\";\n  },\n  reIsHostCtor = /^\\[object .+?Constructor\\]$/,\n  funcProto = Function.prototype,\n  objectProto$b = Object.prototype,\n  funcToString = funcProto.toString,\n  hasOwnProperty$9 = objectProto$b.hasOwnProperty,\n  reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty$9).replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\nvar _baseIsNative = function (value) {\n  return !(!isObject_1(value) || _isMasked(value)) && (isFunction_1(value) ? reIsNative : reIsHostCtor).test(_toSource(value));\n};\nvar _getValue = function (object, key) {\n  return null == object ? void 0 : object[key];\n};\nvar _getNative = function (object, key) {\n    var value = _getValue(object, key);\n    return _baseIsNative(value) ? value : void 0;\n  },\n  _Map = _getNative(_root, \"Map\"),\n  _nativeCreate = _getNative(Object, \"create\");\nvar _hashClear = function () {\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {}, this.size = 0;\n};\nvar _hashDelete = function (key) {\n    var result = this.has(key) && delete this.__data__[key];\n    return this.size -= result ? 1 : 0, result;\n  },\n  hasOwnProperty$8 = Object.prototype.hasOwnProperty;\nvar _hashGet = function (key) {\n    var data = this.__data__;\n    if (_nativeCreate) {\n      var result = data[key];\n      return \"__lodash_hash_undefined__\" === result ? void 0 : result;\n    }\n    return hasOwnProperty$8.call(data, key) ? data[key] : void 0;\n  },\n  hasOwnProperty$7 = Object.prototype.hasOwnProperty;\nvar _hashHas = function (key) {\n  var data = this.__data__;\n  return _nativeCreate ? void 0 !== data[key] : hasOwnProperty$7.call(data, key);\n};\nvar _hashSet = function (key, value) {\n  var data = this.__data__;\n  return this.size += this.has(key) ? 0 : 1, data[key] = _nativeCreate && void 0 === value ? \"__lodash_hash_undefined__\" : value, this;\n};\nfunction Hash(entries) {\n  var index = -1,\n    length = null == entries ? 0 : entries.length;\n  for (this.clear(); ++index < length;) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\nHash.prototype.clear = _hashClear, Hash.prototype.delete = _hashDelete, Hash.prototype.get = _hashGet, Hash.prototype.has = _hashHas, Hash.prototype.set = _hashSet;\nvar _Hash = Hash;\nvar _mapCacheClear = function () {\n  this.size = 0, this.__data__ = {\n    hash: new _Hash(),\n    map: new (_Map || _ListCache)(),\n    string: new _Hash()\n  };\n};\nvar _isKeyable = function (value) {\n  var type = typeof value;\n  return \"string\" == type || \"number\" == type || \"symbol\" == type || \"boolean\" == type ? \"__proto__\" !== value : null === value;\n};\nvar _getMapData = function (map, key) {\n  var data = map.__data__;\n  return _isKeyable(key) ? data[\"string\" == typeof key ? \"string\" : \"hash\"] : data.map;\n};\nvar _mapCacheDelete = function (key) {\n  var result = _getMapData(this, key).delete(key);\n  return this.size -= result ? 1 : 0, result;\n};\nvar _mapCacheGet = function (key) {\n  return _getMapData(this, key).get(key);\n};\nvar _mapCacheHas = function (key) {\n  return _getMapData(this, key).has(key);\n};\nvar _mapCacheSet = function (key, value) {\n  var data = _getMapData(this, key),\n    size = data.size;\n  return data.set(key, value), this.size += data.size == size ? 0 : 1, this;\n};\nfunction MapCache(entries) {\n  var index = -1,\n    length = null == entries ? 0 : entries.length;\n  for (this.clear(); ++index < length;) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\nMapCache.prototype.clear = _mapCacheClear, MapCache.prototype.delete = _mapCacheDelete, MapCache.prototype.get = _mapCacheGet, MapCache.prototype.has = _mapCacheHas, MapCache.prototype.set = _mapCacheSet;\nvar _MapCache = MapCache;\nvar _stackSet = function (key, value) {\n  var data = this.__data__;\n  if (data instanceof _ListCache) {\n    var pairs = data.__data__;\n    if (!_Map || pairs.length < 199) return pairs.push([key, value]), this.size = ++data.size, this;\n    data = this.__data__ = new _MapCache(pairs);\n  }\n  return data.set(key, value), this.size = data.size, this;\n};\nfunction Stack(entries) {\n  var data = this.__data__ = new _ListCache(entries);\n  this.size = data.size;\n}\nStack.prototype.clear = _stackClear, Stack.prototype.delete = _stackDelete, Stack.prototype.get = _stackGet, Stack.prototype.has = _stackHas, Stack.prototype.set = _stackSet;\nvar _Stack = Stack;\nvar _setCacheAdd = function (value) {\n  return this.__data__.set(value, \"__lodash_hash_undefined__\"), this;\n};\nvar _setCacheHas = function (value) {\n  return this.__data__.has(value);\n};\nfunction SetCache(values) {\n  var index = -1,\n    length = null == values ? 0 : values.length;\n  for (this.__data__ = new _MapCache(); ++index < length;) this.add(values[index]);\n}\nSetCache.prototype.add = SetCache.prototype.push = _setCacheAdd, SetCache.prototype.has = _setCacheHas;\nvar _SetCache = SetCache;\nvar _arraySome = function (array, predicate) {\n  for (var index = -1, length = null == array ? 0 : array.length; ++index < length;) if (predicate(array[index], index, array)) return !0;\n  return !1;\n};\nvar _cacheHas = function (cache, key) {\n  return cache.has(key);\n};\nvar _equalArrays = function (array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = 1 & bitmask,\n      arrLength = array.length,\n      othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return !1;\n    var arrStacked = stack.get(array),\n      othStacked = stack.get(other);\n    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;\n    var index = -1,\n      result = !0,\n      seen = 2 & bitmask ? new _SetCache() : void 0;\n    for (stack.set(array, other), stack.set(other, array); ++index < arrLength;) {\n      var arrValue = array[index],\n        othValue = other[index];\n      if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      if (void 0 !== compared) {\n        if (compared) continue;\n        result = !1;\n        break;\n      }\n      if (seen) {\n        if (!_arraySome(other, function (othValue, othIndex) {\n          if (!_cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);\n        })) {\n          result = !1;\n          break;\n        }\n      } else if (arrValue !== othValue && !equalFunc(arrValue, othValue, bitmask, customizer, stack)) {\n        result = !1;\n        break;\n      }\n    }\n    return stack.delete(array), stack.delete(other), result;\n  },\n  _Uint8Array = _root.Uint8Array;\nvar _mapToArray = function (map) {\n  var index = -1,\n    result = Array(map.size);\n  return map.forEach(function (value, key) {\n    result[++index] = [key, value];\n  }), result;\n};\nvar _setToArray = function (set) {\n    var index = -1,\n      result = Array(set.size);\n    return set.forEach(function (value) {\n      result[++index] = value;\n    }), result;\n  },\n  symbolProto$1 = _Symbol ? _Symbol.prototype : void 0,\n  symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : void 0;\nvar _equalByTag = function (object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case \"[object DataView]\":\n      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return !1;\n      object = object.buffer, other = other.buffer;\n    case \"[object ArrayBuffer]\":\n      return !(object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other)));\n    case \"[object Boolean]\":\n    case \"[object Date]\":\n    case \"[object Number]\":\n      return eq_1(+object, +other);\n    case \"[object Error]\":\n      return object.name == other.name && object.message == other.message;\n    case \"[object RegExp]\":\n    case \"[object String]\":\n      return object == other + \"\";\n    case \"[object Map]\":\n      var convert = _mapToArray;\n    case \"[object Set]\":\n      var isPartial = 1 & bitmask;\n      if (convert || (convert = _setToArray), object.size != other.size && !isPartial) return !1;\n      var stacked = stack.get(object);\n      if (stacked) return stacked == other;\n      bitmask |= 2, stack.set(object, other);\n      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      return stack.delete(object), result;\n    case \"[object Symbol]\":\n      if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);\n  }\n  return !1;\n};\nvar _arrayPush = function (array, values) {\n    for (var index = -1, length = values.length, offset = array.length; ++index < length;) array[offset + index] = values[index];\n    return array;\n  },\n  isArray_1 = Array.isArray;\nvar _baseGetAllKeys = function (object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));\n};\nvar _arrayFilter = function (array, predicate) {\n  for (var index = -1, length = null == array ? 0 : array.length, resIndex = 0, result = []; ++index < length;) {\n    var value = array[index];\n    predicate(value, index, array) && (result[resIndex++] = value);\n  }\n  return result;\n};\nvar stubArray_1 = function () {\n    return [];\n  },\n  propertyIsEnumerable$1 = Object.prototype.propertyIsEnumerable,\n  nativeGetSymbols = Object.getOwnPropertySymbols,\n  _getSymbols = nativeGetSymbols ? function (object) {\n    return null == object ? [] : (object = Object(object), _arrayFilter(nativeGetSymbols(object), function (symbol) {\n      return propertyIsEnumerable$1.call(object, symbol);\n    }));\n  } : stubArray_1;\nvar _baseTimes = function (n, iteratee) {\n  for (var index = -1, result = Array(n); ++index < n;) result[index] = iteratee(index);\n  return result;\n};\nvar isObjectLike_1 = function (value) {\n  return null != value && \"object\" == typeof value;\n};\nvar _baseIsArguments = function (value) {\n    return isObjectLike_1(value) && \"[object Arguments]\" == _baseGetTag(value);\n  },\n  objectProto$7 = Object.prototype,\n  hasOwnProperty$6 = objectProto$7.hasOwnProperty,\n  propertyIsEnumerable = objectProto$7.propertyIsEnumerable,\n  isArguments_1 = _baseIsArguments(function () {\n    return arguments;\n  }()) ? _baseIsArguments : function (value) {\n    return isObjectLike_1(value) && hasOwnProperty$6.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n  };\nvar stubFalse_1 = function () {\n    return !1;\n  },\n  isBuffer_1 = createCommonjsModule(function (module, exports) {\n    var freeExports = exports && !exports.nodeType && exports,\n      freeModule = freeExports && module && !module.nodeType && module,\n      Buffer = freeModule && freeModule.exports === freeExports ? _root.Buffer : void 0,\n      isBuffer = (Buffer ? Buffer.isBuffer : void 0) || stubFalse_1;\n    module.exports = isBuffer;\n  }),\n  reIsUint = /^(?:0|[1-9]\\d*)$/;\nvar _isIndex = function (value, length) {\n  var type = typeof value;\n  return !!(length = null == length ? 9007199254740991 : length) && (\"number\" == type || \"symbol\" != type && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n};\nvar isLength_1 = function (value) {\n    return \"number\" == typeof value && value > -1 && value % 1 == 0 && value <= 9007199254740991;\n  },\n  typedArrayTags = {};\ntypedArrayTags[\"[object Float32Array]\"] = typedArrayTags[\"[object Float64Array]\"] = typedArrayTags[\"[object Int8Array]\"] = typedArrayTags[\"[object Int16Array]\"] = typedArrayTags[\"[object Int32Array]\"] = typedArrayTags[\"[object Uint8Array]\"] = typedArrayTags[\"[object Uint8ClampedArray]\"] = typedArrayTags[\"[object Uint16Array]\"] = typedArrayTags[\"[object Uint32Array]\"] = !0, typedArrayTags[\"[object Arguments]\"] = typedArrayTags[\"[object Array]\"] = typedArrayTags[\"[object ArrayBuffer]\"] = typedArrayTags[\"[object Boolean]\"] = typedArrayTags[\"[object DataView]\"] = typedArrayTags[\"[object Date]\"] = typedArrayTags[\"[object Error]\"] = typedArrayTags[\"[object Function]\"] = typedArrayTags[\"[object Map]\"] = typedArrayTags[\"[object Number]\"] = typedArrayTags[\"[object Object]\"] = typedArrayTags[\"[object RegExp]\"] = typedArrayTags[\"[object Set]\"] = typedArrayTags[\"[object String]\"] = typedArrayTags[\"[object WeakMap]\"] = !1;\nvar _baseIsTypedArray = function (value) {\n  return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];\n};\nvar _baseUnary = function (func) {\n    return function (value) {\n      return func(value);\n    };\n  },\n  _nodeUtil = createCommonjsModule(function (module, exports) {\n    var freeExports = exports && !exports.nodeType && exports,\n      freeModule = freeExports && module && !module.nodeType && module,\n      freeProcess = freeModule && freeModule.exports === freeExports && _freeGlobal.process,\n      nodeUtil = function () {\n        try {\n          var types = freeModule && freeModule.require && freeModule.require(\"util\").types;\n          return types || freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n        } catch (e) {}\n      }();\n    module.exports = nodeUtil;\n  }),\n  nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray,\n  isTypedArray_1 = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray,\n  hasOwnProperty$5 = Object.prototype.hasOwnProperty;\nvar _arrayLikeKeys = function (value, inherited) {\n    var isArr = isArray_1(value),\n      isArg = !isArr && isArguments_1(value),\n      isBuff = !isArr && !isArg && isBuffer_1(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? _baseTimes(value.length, String) : [],\n      length = result.length;\n    for (var key in value) !inherited && !hasOwnProperty$5.call(value, key) || skipIndexes && (\"length\" == key || isBuff && (\"offset\" == key || \"parent\" == key) || isType && (\"buffer\" == key || \"byteLength\" == key || \"byteOffset\" == key) || _isIndex(key, length)) || result.push(key);\n    return result;\n  },\n  objectProto$5 = Object.prototype;\nvar _isPrototype = function (value) {\n  var Ctor = value && value.constructor;\n  return value === (\"function\" == typeof Ctor && Ctor.prototype || objectProto$5);\n};\nvar _nativeKeys = function (func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }(Object.keys, Object),\n  hasOwnProperty$4 = Object.prototype.hasOwnProperty;\nvar _baseKeys = function (object) {\n  if (!_isPrototype(object)) return _nativeKeys(object);\n  var result = [];\n  for (var key in Object(object)) hasOwnProperty$4.call(object, key) && \"constructor\" != key && result.push(key);\n  return result;\n};\nvar isArrayLike_1 = function (value) {\n  return null != value && isLength_1(value.length) && !isFunction_1(value);\n};\nvar keys_1 = function (object) {\n  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);\n};\nvar _getAllKeys = function (object) {\n    return _baseGetAllKeys(object, keys_1, _getSymbols);\n  },\n  hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _equalObjects = function (object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = 1 & bitmask,\n      objProps = _getAllKeys(object),\n      objLength = objProps.length;\n    if (objLength != _getAllKeys(other).length && !isPartial) return !1;\n    for (var index = objLength; index--;) {\n      var key = objProps[index];\n      if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) return !1;\n    }\n    var objStacked = stack.get(object),\n      othStacked = stack.get(other);\n    if (objStacked && othStacked) return objStacked == other && othStacked == object;\n    var result = !0;\n    stack.set(object, other), stack.set(other, object);\n    for (var skipCtor = isPartial; ++index < objLength;) {\n      var objValue = object[key = objProps[index]],\n        othValue = other[key];\n      if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      if (!(void 0 === compared ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = !1;\n        break;\n      }\n      skipCtor || (skipCtor = \"constructor\" == key);\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n        othCtor = other.constructor;\n      objCtor == othCtor || !(\"constructor\" in object) || !(\"constructor\" in other) || \"function\" == typeof objCtor && objCtor instanceof objCtor && \"function\" == typeof othCtor && othCtor instanceof othCtor || (result = !1);\n    }\n    return stack.delete(object), stack.delete(other), result;\n  },\n  _DataView = _getNative(_root, \"DataView\"),\n  _Promise = _getNative(_root, \"Promise\"),\n  _Set = _getNative(_root, \"Set\"),\n  _WeakMap = _getNative(_root, \"WeakMap\"),\n  dataViewCtorString = _toSource(_DataView),\n  mapCtorString = _toSource(_Map),\n  promiseCtorString = _toSource(_Promise),\n  setCtorString = _toSource(_Set),\n  weakMapCtorString = _toSource(_WeakMap),\n  getTag = _baseGetTag;\n(_DataView && \"[object DataView]\" != getTag(new _DataView(new ArrayBuffer(1))) || _Map && \"[object Map]\" != getTag(new _Map()) || _Promise && \"[object Promise]\" != getTag(_Promise.resolve()) || _Set && \"[object Set]\" != getTag(new _Set()) || _WeakMap && \"[object WeakMap]\" != getTag(new _WeakMap())) && (getTag = function (value) {\n  var result = _baseGetTag(value),\n    Ctor = \"[object Object]\" == result ? value.constructor : void 0,\n    ctorString = Ctor ? _toSource(Ctor) : \"\";\n  if (ctorString) switch (ctorString) {\n    case dataViewCtorString:\n      return \"[object DataView]\";\n    case mapCtorString:\n      return \"[object Map]\";\n    case promiseCtorString:\n      return \"[object Promise]\";\n    case setCtorString:\n      return \"[object Set]\";\n    case weakMapCtorString:\n      return \"[object WeakMap]\";\n  }\n  return result;\n});\nvar _getTag = getTag,\n  objectTag = \"[object Object]\",\n  hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nvar _baseIsEqualDeep = function (object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray_1(object),\n    othIsArr = isArray_1(other),\n    objTag = objIsArr ? \"[object Array]\" : _getTag(object),\n    othTag = othIsArr ? \"[object Array]\" : _getTag(other),\n    objIsObj = (objTag = \"[object Arguments]\" == objTag ? objectTag : objTag) == objectTag,\n    othIsObj = (othTag = \"[object Arguments]\" == othTag ? objectTag : othTag) == objectTag,\n    isSameTag = objTag == othTag;\n  if (isSameTag && isBuffer_1(object)) {\n    if (!isBuffer_1(other)) return !1;\n    objIsArr = !0, objIsObj = !1;\n  }\n  if (isSameTag && !objIsObj) return stack || (stack = new _Stack()), objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  if (!(1 & bitmask)) {\n    var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, \"__wrapped__\"),\n      othIsWrapped = othIsObj && hasOwnProperty$2.call(other, \"__wrapped__\");\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n        othUnwrapped = othIsWrapped ? other.value() : other;\n      return stack || (stack = new _Stack()), equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  return !!isSameTag && (stack || (stack = new _Stack()), _equalObjects(object, other, bitmask, customizer, equalFunc, stack));\n};\nvar _baseIsEqual = function baseIsEqual(value, other, bitmask, customizer, stack) {\n  return value === other || (null == value || null == other || !isObjectLike_1(value) && !isObjectLike_1(other) ? value != value && other != other : _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack));\n};\nvar _baseIsMatch = function (object, source, matchData, customizer) {\n  var index = matchData.length,\n    length = index,\n    noCustomizer = !customizer;\n  if (null == object) return !length;\n  for (object = Object(object); index--;) {\n    var data = matchData[index];\n    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return !1;\n  }\n  for (; ++index < length;) {\n    var key = (data = matchData[index])[0],\n      objValue = object[key],\n      srcValue = data[1];\n    if (noCustomizer && data[2]) {\n      if (void 0 === objValue && !(key in object)) return !1;\n    } else {\n      var stack = new _Stack();\n      if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);\n      if (!(void 0 === result ? _baseIsEqual(srcValue, objValue, 3, customizer, stack) : result)) return !1;\n    }\n  }\n  return !0;\n};\nvar _isStrictComparable = function (value) {\n  return value == value && !isObject_1(value);\n};\nvar _getMatchData = function (object) {\n  for (var result = keys_1(object), length = result.length; length--;) {\n    var key = result[length],\n      value = object[key];\n    result[length] = [key, value, _isStrictComparable(value)];\n  }\n  return result;\n};\nvar _matchesStrictComparable = function (key, srcValue) {\n  return function (object) {\n    return null != object && object[key] === srcValue && (void 0 !== srcValue || key in Object(object));\n  };\n};\nvar _baseMatches = function (source) {\n  var matchData = _getMatchData(source);\n  return 1 == matchData.length && matchData[0][2] ? _matchesStrictComparable(matchData[0][0], matchData[0][1]) : function (object) {\n    return object === source || _baseIsMatch(object, source, matchData);\n  };\n};\nvar isSymbol_1 = function (value) {\n    return \"symbol\" == typeof value || isObjectLike_1(value) && \"[object Symbol]\" == _baseGetTag(value);\n  },\n  reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n  reIsPlainProp = /^\\w*$/;\nvar _isKey = function (value, object) {\n  if (isArray_1(value)) return !1;\n  var type = typeof value;\n  return !(\"number\" != type && \"symbol\" != type && \"boolean\" != type && null != value && !isSymbol_1(value)) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) || null != object && value in Object(object);\n};\nfunction memoize(func, resolver) {\n  if (\"function\" != typeof func || null != resolver && \"function\" != typeof resolver) throw new TypeError(\"Expected a function\");\n  var memoized = function () {\n    var args = arguments,\n      key = resolver ? resolver.apply(this, args) : args[0],\n      cache = memoized.cache;\n    if (cache.has(key)) return cache.get(key);\n    var result = func.apply(this, args);\n    return memoized.cache = cache.set(key, result) || cache, result;\n  };\n  return memoized.cache = new (memoize.Cache || _MapCache)(), memoized;\n}\nmemoize.Cache = _MapCache;\nvar memoize_1 = memoize;\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n  reEscapeChar = /\\\\(\\\\)?/g,\n  _stringToPath = function (func) {\n    var result = memoize_1(func, function (key) {\n        return 500 === cache.size && cache.clear(), key;\n      }),\n      cache = result.cache;\n    return result;\n  }(function (string) {\n    var result = [];\n    return 46 === string.charCodeAt(0) && result.push(\"\"), string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, \"$1\") : number || match);\n    }), result;\n  });\nvar _arrayMap = function (array, iteratee) {\n    for (var index = -1, length = null == array ? 0 : array.length, result = Array(length); ++index < length;) result[index] = iteratee(array[index], index, array);\n    return result;\n  },\n  symbolProto = _Symbol ? _Symbol.prototype : void 0,\n  symbolToString = symbolProto ? symbolProto.toString : void 0;\nvar _baseToString = function baseToString(value) {\n  if (\"string\" == typeof value) return value;\n  if (isArray_1(value)) return _arrayMap(value, baseToString) + \"\";\n  if (isSymbol_1(value)) return symbolToString ? symbolToString.call(value) : \"\";\n  var result = value + \"\";\n  return \"0\" == result && 1 / value == -Infinity ? \"-0\" : result;\n};\nvar toString_1 = function (value) {\n  return null == value ? \"\" : _baseToString(value);\n};\nvar _castPath = function (value, object) {\n  return isArray_1(value) ? value : _isKey(value, object) ? [value] : _stringToPath(toString_1(value));\n};\nvar _toKey = function (value) {\n  if (\"string\" == typeof value || isSymbol_1(value)) return value;\n  var result = value + \"\";\n  return \"0\" == result && 1 / value == -Infinity ? \"-0\" : result;\n};\nvar _baseGet = function (object, path) {\n  for (var index = 0, length = (path = _castPath(path, object)).length; null != object && index < length;) object = object[_toKey(path[index++])];\n  return index && index == length ? object : void 0;\n};\nvar get_1 = function (object, path, defaultValue) {\n  var result = null == object ? void 0 : _baseGet(object, path);\n  return void 0 === result ? defaultValue : result;\n};\nvar _baseHasIn = function (object, key) {\n  return null != object && key in Object(object);\n};\nvar _hasPath = function (object, path, hasFunc) {\n  for (var index = -1, length = (path = _castPath(path, object)).length, result = !1; ++index < length;) {\n    var key = _toKey(path[index]);\n    if (!(result = null != object && hasFunc(object, key))) break;\n    object = object[key];\n  }\n  return result || ++index != length ? result : !!(length = null == object ? 0 : object.length) && isLength_1(length) && _isIndex(key, length) && (isArray_1(object) || isArguments_1(object));\n};\nvar hasIn_1 = function (object, path) {\n  return null != object && _hasPath(object, path, _baseHasIn);\n};\nvar _baseMatchesProperty = function (path, srcValue) {\n  return _isKey(path) && _isStrictComparable(srcValue) ? _matchesStrictComparable(_toKey(path), srcValue) : function (object) {\n    var objValue = get_1(object, path);\n    return void 0 === objValue && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, 3);\n  };\n};\nvar identity_1 = function (value) {\n  return value;\n};\nvar _baseProperty = function (key) {\n  return function (object) {\n    return null == object ? void 0 : object[key];\n  };\n};\nvar _basePropertyDeep = function (path) {\n  return function (object) {\n    return _baseGet(object, path);\n  };\n};\nvar property_1 = function (path) {\n  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);\n};\nvar _baseIteratee = function (value) {\n    return \"function\" == typeof value ? value : null == value ? identity_1 : \"object\" == typeof value ? isArray_1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value) : property_1(value);\n  },\n  reWhitespace = /\\s/;\nvar _trimmedEndIndex = function (string) {\n    for (var index = string.length; index-- && reWhitespace.test(string.charAt(index)););\n    return index;\n  },\n  reTrimStart = /^\\s+/;\nvar _baseTrim = function (string) {\n    return string ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, \"\") : string;\n  },\n  reIsBadHex = /^[-+]0x[0-9a-f]+$/i,\n  reIsBinary = /^0b[01]+$/i,\n  reIsOctal = /^0o[0-7]+$/i,\n  freeParseInt = parseInt;\nvar toNumber_1 = function (value) {\n  if (\"number\" == typeof value) return value;\n  if (isSymbol_1(value)) return NaN;\n  if (isObject_1(value)) {\n    var other = \"function\" == typeof value.valueOf ? value.valueOf() : value;\n    value = isObject_1(other) ? other + \"\" : other;\n  }\n  if (\"string\" != typeof value) return 0 === value ? value : +value;\n  value = _baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NaN : +value;\n};\nvar toFinite_1 = function (value) {\n  return value ? Infinity === (value = toNumber_1(value)) || -Infinity === value ? 17976931348623157e292 * (value < 0 ? -1 : 1) : value == value ? value : 0 : 0 === value ? value : 0;\n};\nvar toInteger_1 = function (value) {\n    var result = toFinite_1(value),\n      remainder = result % 1;\n    return result == result ? remainder ? result - remainder : result : 0;\n  },\n  nativeMax$1 = Math.max,\n  nativeMin = Math.min;\nvar findLastIndex_1 = function (array, predicate, fromIndex) {\n    var length = null == array ? 0 : array.length;\n    if (!length) return -1;\n    var index = length - 1;\n    return void 0 !== fromIndex && (index = toInteger_1(fromIndex), index = fromIndex < 0 ? nativeMax$1(length + index, 0) : nativeMin(index, length - 1)), _baseFindIndex(array, _baseIteratee(predicate), index, !0);\n  },\n  computeOldLineNumber$2 = computeLineNumberFactory(\"old\"),\n  computeNewLineNumber$1 = computeLineNumberFactory(\"new\");\nfunction getOldRangeFromHunk(_ref) {\n  var oldStart = _ref.oldStart;\n  return [oldStart, oldStart + _ref.oldLines - 1];\n}\nfunction createHunkFromChanges(changes) {\n  if (!changes.length) return null;\n  var hunk = changes.reduce(function (hunk, change) {\n      return isNormal(change) || (hunk.isPlain = !1), isInsert(change) || (hunk.oldLines = hunk.oldLines + 1, -1 === hunk.oldStart && (hunk.oldStart = computeOldLineNumber$2(change))), isDelete(change) || (hunk.newLines = hunk.newLines + 1, -1 === hunk.newStart && (hunk.newStart = computeNewLineNumber$1(change))), hunk;\n    }, {\n      isPlain: !0,\n      content: \"\",\n      oldStart: -1,\n      oldLines: 0,\n      newStart: -1,\n      newLines: 0\n    }),\n    oldStart = hunk.oldStart,\n    oldLines = hunk.oldLines,\n    newStart = hunk.newStart,\n    newLines = hunk.newLines;\n  return _objectSpread2(_objectSpread2({}, hunk), {}, {\n    content: \"@@ -\".concat(oldStart, \",\").concat(oldLines, \" +\").concat(newStart, \",\").concat(newLines),\n    changes: changes\n  });\n}\nfunction textLinesToHunk(lines, oldStartLine, newStartLine) {\n  return createHunkFromChanges(lines.map(function (line, i) {\n    return {\n      type: \"normal\",\n      isNormal: !0,\n      oldLineNumber: oldStartLine + i,\n      newLineNumber: newStartLine + i,\n      content: \"\" + line\n    };\n  }));\n}\nfunction sliceHunk(_ref2, oldStartLine, oldEndLine) {\n  var changes = _ref2.changes,\n    changeIndex = changes.findIndex(function (change) {\n      return computeOldLineNumber$2(change) >= oldStartLine;\n    });\n  if (-1 === changeIndex) return null;\n  var startIndex = function () {\n    if (0 === changeIndex) return changeIndex;\n    var nearestHeadingNocmalChangeIndex = findLastIndex_1(changes, function (change) {\n      return !isInsert(change);\n    }, changeIndex - 1);\n    return -1 === nearestHeadingNocmalChangeIndex ? changeIndex : nearestHeadingNocmalChangeIndex + 1;\n  }();\n  if (void 0 === oldEndLine) return createHunkFromChanges(changes.slice(startIndex));\n  var endIndex = findLastIndex_1(changes, function (change) {\n    return computeOldLineNumber$2(change) <= oldEndLine;\n  });\n  return createHunkFromChanges(changes.slice(startIndex, -1 === endIndex ? void 0 : endIndex));\n}\nfunction mergeHunk(previousHunk, nextHunk) {\n  if (!previousHunk) return nextHunk;\n  if (!nextHunk) return previousHunk;\n  var _getOldRangeFromHunk2 = _slicedToArray(getOldRangeFromHunk(previousHunk), 2),\n    previousStart = _getOldRangeFromHunk2[0],\n    previousEnd = _getOldRangeFromHunk2[1],\n    _getOldRangeFromHunk4 = _slicedToArray(getOldRangeFromHunk(nextHunk), 2),\n    nextStart = _getOldRangeFromHunk4[0],\n    nextEnd = _getOldRangeFromHunk4[1];\n  if (previousEnd + 1 === nextStart) return createHunkFromChanges([].concat(_toConsumableArray(previousHunk.changes), _toConsumableArray(nextHunk.changes)));\n  if (previousStart <= nextStart && previousEnd >= nextEnd) {\n    if (previousHunk.isPlain && !nextHunk.isPlain) {\n      var head = sliceHunk(previousHunk, previousStart, nextStart),\n        _tail = sliceHunk(previousHunk, nextEnd + 1);\n      return mergeHunk(mergeHunk(head, nextHunk), _tail);\n    }\n    return previousHunk;\n  }\n  return previousHunk.isPlain ? mergeHunk(sliceHunk(previousHunk, previousStart, nextStart), nextHunk) : mergeHunk(previousHunk, sliceHunk(nextHunk, previousEnd + 1));\n}\nfunction appendOrMergeHunk(hunks, nextHunk) {\n  var lastHunk = last$1(hunks);\n  if (!lastHunk) return [nextHunk];\n  if (lastHunk.oldStart + lastHunk.oldLines < nextHunk.oldStart) return hunks.concat(nextHunk);\n  var mergedHunk = mergeHunk(lastHunk, nextHunk);\n  return mergedHunk ? [].concat(_toConsumableArray(hunks.slice(0, -1)), [mergedHunk]) : hunks;\n}\nfunction insertHunk(hunks, insertion) {\n  var insertionOldLineNumber = computeOldLineNumber$2(insertion.changes[0]),\n    insertPosition = hunks.findIndex(function (_ref3) {\n      var changes = _ref3.changes;\n      return !!changes.length && computeOldLineNumber$2(changes[0]) >= insertionOldLineNumber;\n    });\n  return (-1 === insertPosition ? hunks.concat(insertion) : [].concat(_toConsumableArray(hunks.slice(0, insertPosition)), [insertion], _toConsumableArray(hunks.slice(insertPosition)))).reduce(appendOrMergeHunk, []);\n}\nfunction getChangeKey(change) {\n  if (!change) throw new Error(\"change is not provided\");\n  if (isNormal(change)) return \"N\".concat(change.oldLineNumber);\n  var prefix = isInsert(change) ? \"I\" : \"D\";\n  return \"\".concat(prefix).concat(change.lineNumber);\n}\nvar getCorrespondingNewLineNumber$1 = getCorrespondingLineNumberFactory(\"old\"),\n  computeOldLineNumber$1 = computeLineNumberFactory(\"old\"),\n  isOldLineNumberInHunk = isInHunkFactory(\"oldStart\", \"oldLines\"),\n  isOldLineNumberBetweenHunks = isBetweenHunksFactory(\"oldStart\", \"oldLines\");\nfunction splitRangeToValidOnes(hunks, start, end) {\n  var correspondingHunkIndex = function (hunks, oldLineNumber) {\n    if (!hunks.length) return -1;\n    var firstHunk = first(hunks);\n    if (oldLineNumber < firstHunk.oldStart || isOldLineNumberInHunk(firstHunk, oldLineNumber)) return 0;\n    for (var i = 1; i < hunks.length; i++) {\n      var currentHunk = hunks[i];\n      if (isOldLineNumberInHunk(currentHunk, oldLineNumber)) return i;\n      var previousHunk = hunks[i - 1];\n      if (isOldLineNumberBetweenHunks(previousHunk, currentHunk, oldLineNumber)) return i;\n    }\n    return -1;\n  }(hunks, start);\n  if (-1 === correspondingHunkIndex) return [[start, end]];\n  var correspondingHunk = hunks[correspondingHunkIndex];\n  if (start < correspondingHunk.oldStart) {\n    var headingChangesCount = correspondingHunk.changes.findIndex(function (change) {\n        return !isNormal(change);\n      }),\n      _validEnd = correspondingHunk.oldStart + Math.max(headingChangesCount, 0);\n    return _validEnd >= end ? [[start, end]] : [[start, _validEnd]].concat(_toConsumableArray(splitRangeToValidOnes(hunks, _validEnd + 1, end)));\n  }\n  var changes = correspondingHunk.changes,\n    nearestNormalChangeIndex = function (_ref, start) {\n      var changes = _ref.changes,\n        index = changes.findIndex(function (change) {\n          return computeOldLineNumber$1(change) === start;\n        });\n      if (index < 0) return -1;\n      for (var i = index; i < changes.length; i++) if (isNormal(changes[i])) return i;\n      return -1;\n    }(correspondingHunk, start);\n  if (-1 === nearestNormalChangeIndex) return [];\n  var validStartChange = changes[nearestNormalChangeIndex],\n    validStart = computeOldLineNumber$1(validStartChange),\n    adjacentChangesCount = changes.slice(nearestNormalChangeIndex + 1).findIndex(function (change) {\n      return !isNormal(change);\n    }),\n    validEnd = computeOldLineNumber$1(validStartChange) + Math.max(adjacentChangesCount, 0);\n  return validEnd >= end ? [[validStart, end]] : [[validStart, validEnd]].concat(_toConsumableArray(splitRangeToValidOnes(hunks, validEnd + 1, end)));\n}\nfunction expandFromRawCode(hunks, source, start, end) {\n  return splitRangeToValidOnes(hunks, start, end).reduce(function (hunks, range) {\n    return function (hunks, source, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        start = _ref3[0],\n        end = _ref3[1],\n        slicedLines = (\"string\" == typeof source ? source.split(\"\\n\") : source).slice(Math.max(start, 1) - 1, end - 1);\n      if (!slicedLines.length) return hunks;\n      var slicedHunk = textLinesToHunk(slicedLines, start, getCorrespondingNewLineNumber$1(hunks, start));\n      return slicedHunk ? insertHunk(hunks, slicedHunk) : hunks;\n    }(hunks, source, range);\n  }, hunks);\n}\nfunction getCollapsedLinesCountBetween(previousHunk, nextHunk) {\n  if (!previousHunk) return nextHunk.oldStart - 1;\n  var previousEnd = previousHunk.oldStart + previousHunk.oldLines;\n  return nextHunk.oldStart - previousEnd;\n}\nfunction expandCollapsedBlockBy(hunks, source, predicate) {\n  var linesOfCode = \"string\" == typeof source ? source.split(\"\\n\") : source,\n    firstHunk = first(hunks),\n    initialExpandingBlocks = predicate(firstHunk.oldStart - 1, 1, 1) ? [[1, firstHunk.oldStart]] : [],\n    expandingBlocks = hunks.reduce(function (expandingBlocks, currentHunk, index, hunks) {\n      var nextHunk = hunks[index + 1],\n        oldStart = currentHunk.oldStart + currentHunk.oldLines,\n        newStart = currentHunk.newStart + currentHunk.newLines,\n        lines = nextHunk ? getCollapsedLinesCountBetween(currentHunk, nextHunk) : linesOfCode.length - oldStart + 1;\n      return predicate(lines, oldStart, newStart) && expandingBlocks.push([oldStart, oldStart + lines]), expandingBlocks;\n    }, initialExpandingBlocks);\n  return expandingBlocks.reduce(function (hunks, _ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      start = _ref5[0],\n      end = _ref5[1];\n    return expandFromRawCode(hunks, linesOfCode, start, end);\n  }, hunks);\n}\nvar computeOldLineNumber = computeLineNumberFactory(\"old\"),\n  computeNewLineNumber = computeLineNumberFactory(\"new\"),\n  findChangeByOldLineNumber = findChangeByLineNumberFactory(\"old\"),\n  findChangeByNewLineNumber = findChangeByLineNumberFactory(\"new\"),\n  getCorrespondingOldLineNumber = getCorrespondingLineNumberFactory(\"new\"),\n  getCorrespondingNewLineNumber = getCorrespondingLineNumberFactory(\"old\"),\n  _defineProperty = function () {\n    try {\n      var func = _getNative(Object, \"defineProperty\");\n      return func({}, \"\", {}), func;\n    } catch (e) {}\n  }();\nvar _baseAssignValue = function (object, key, value) {\n  \"__proto__\" == key && _defineProperty ? _defineProperty(object, key, {\n    configurable: !0,\n    enumerable: !0,\n    value: value,\n    writable: !0\n  }) : object[key] = value;\n};\nvar _createBaseFor = function (fromRight) {\n    return function (object, iteratee, keysFunc) {\n      for (var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length; length--;) {\n        var key = props[fromRight ? length : ++index];\n        if (!1 === iteratee(iterable[key], key, iterable)) break;\n      }\n      return object;\n    };\n  },\n  _baseFor = _createBaseFor();\nvar _baseForOwn = function (object, iteratee) {\n  return object && _baseFor(object, iteratee, keys_1);\n};\nvar mapValues_1 = function (object, iteratee) {\n    var result = {};\n    return iteratee = _baseIteratee(iteratee), _baseForOwn(object, function (value, key, object) {\n      _baseAssignValue(result, key, iteratee(value, key, object));\n    }), result;\n  },\n  _excluded$7 = [\"changeKey\", \"text\", \"tokens\", \"renderToken\"],\n  defaultRenderToken = function defaultRenderToken(_ref, i) {\n    var type = _ref.type,\n      value = _ref.value,\n      markType = _ref.markType,\n      properties = _ref.properties,\n      className = _ref.className,\n      children = _ref.children,\n      renderWithClassName = function (className) {\n        return jsx(\"span\", {\n          className: className,\n          children: value || children && children.map(defaultRenderToken)\n        }, i);\n      };\n    switch (type) {\n      case \"text\":\n        return value;\n      case \"mark\":\n        return renderWithClassName(\"diff-code-mark diff-code-mark-\".concat(markType));\n      case \"edit\":\n        return renderWithClassName(\"diff-code-edit\");\n      default:\n        var legacyClassName = properties && properties.className;\n        return renderWithClassName(classnames(className || legacyClassName));\n    }\n  };\nfunction isEmptyToken(tokens) {\n  if (tokens.length > 1) return !1;\n  var token = _slicedToArray(tokens, 1)[0];\n  return \"text\" === token.type && !token.value;\n}\nfunction CodeCell(props) {\n  var changeKey = props.changeKey,\n    text = props.text,\n    tokens = props.tokens,\n    renderToken = props.renderToken,\n    attributes = _objectWithoutProperties(props, _excluded$7),\n    actualRenderToken = renderToken ? function (token, i) {\n      return renderToken(token, defaultRenderToken, i);\n    } : defaultRenderToken;\n  return jsx(\"td\", _objectSpread2(_objectSpread2({}, attributes), {}, {\n    \"data-change-key\": changeKey,\n    children: tokens ? isEmptyToken(tokens) ? \" \" : tokens.map(actualRenderToken) : text || \" \"\n  }));\n}\nvar CodeCell$1 = memo(CodeCell);\nfunction renderDefaultBy(change, side) {\n  return function () {\n    var lineNumber = \"old\" === side ? computeOldLineNumber(change) : computeNewLineNumber(change);\n    return -1 === lineNumber ? void 0 : lineNumber;\n  };\n}\nfunction wrapInAnchorBy(gutterAnchor, anchorTarget) {\n  return function (element) {\n    return gutterAnchor && element ? jsx(\"a\", {\n      href: anchorTarget ? \"#\" + anchorTarget : void 0,\n      children: element\n    }) : element;\n  };\n}\nfunction composeCallback(own, custom) {\n  return custom ? function (e) {\n    own(), custom(e);\n  } : own;\n}\nfunction useBoundCallbacks(callbacks, arg, hoverOn, hoverOff) {\n  return useMemo(function () {\n    var output = mapValues_1(callbacks, function (fn) {\n      return function (e) {\n        return fn && fn(arg, e);\n      };\n    });\n    return output.onMouseEnter = composeCallback(hoverOn, output.onMouseEnter), output.onMouseLeave = composeCallback(hoverOff, output.onMouseLeave), output;\n  }, [callbacks, hoverOn, hoverOff, arg]);\n}\nfunction renderGutterCell(className, change, changeKey, side, gutterAnchor, anchorTarget, events, inHoverState, renderGutter) {\n  var gutterOptions = {\n    change: change,\n    side: side,\n    inHoverState: inHoverState,\n    renderDefault: renderDefaultBy(change, side),\n    wrapInAnchor: wrapInAnchorBy(gutterAnchor, anchorTarget)\n  };\n  return jsx(\"td\", _objectSpread2(_objectSpread2({\n    className: className\n  }, events), {}, {\n    \"data-change-key\": changeKey,\n    children: renderGutter(gutterOptions)\n  }));\n}\nfunction UnifiedChange(props) {\n  var _useState2,\n    value,\n    setValue,\n    change = props.change,\n    selected = props.selected,\n    tokens = props.tokens,\n    className = props.className,\n    gutterClassName = props.gutterClassName,\n    codeClassName = props.codeClassName,\n    gutterEvents = props.gutterEvents,\n    codeEvents = props.codeEvents,\n    hideGutter = props.hideGutter,\n    gutterAnchor = props.gutterAnchor,\n    generateAnchorID = props.generateAnchorID,\n    renderToken = props.renderToken,\n    renderGutter = props.renderGutter,\n    type = change.type,\n    content = change.content,\n    changeKey = getChangeKey(change),\n    _useBoolean = (_useState2 = _slicedToArray(useState(!1), 2), value = _useState2[0], setValue = _useState2[1], [value, useCallback(function () {\n      return setValue(!0);\n    }, []), useCallback(function () {\n      return setValue(!1);\n    }, [])]),\n    _useBoolean2 = _slicedToArray(_useBoolean, 3),\n    hover = _useBoolean2[0],\n    hoverOn = _useBoolean2[1],\n    hoverOff = _useBoolean2[2],\n    eventArg = useMemo(function () {\n      return {\n        change: change\n      };\n    }, [change]),\n    boundGutterEvents = useBoundCallbacks(gutterEvents, eventArg, hoverOn, hoverOff),\n    boundCodeEvents = useBoundCallbacks(codeEvents, eventArg, hoverOn, hoverOff),\n    anchorID = generateAnchorID(change),\n    gutterClassNameValue = classnames(\"diff-gutter\", \"diff-gutter-\".concat(type), gutterClassName, {\n      \"diff-gutter-selected\": selected\n    }),\n    codeClassNameValue = classnames(\"diff-code\", \"diff-code-\".concat(type), codeClassName, {\n      \"diff-code-selected\": selected\n    });\n  return jsxs(\"tr\", {\n    id: anchorID,\n    className: classnames(\"diff-line\", className),\n    children: [!hideGutter && renderGutterCell(gutterClassNameValue, change, changeKey, \"old\", gutterAnchor, anchorID, boundGutterEvents, hover, renderGutter), !hideGutter && renderGutterCell(gutterClassNameValue, change, changeKey, \"new\", gutterAnchor, anchorID, boundGutterEvents, hover, renderGutter), jsx(CodeCell$1, _objectSpread2({\n      className: codeClassNameValue,\n      changeKey: changeKey,\n      text: content,\n      tokens: tokens,\n      renderToken: renderToken\n    }, boundCodeEvents))]\n  });\n}\nvar UnifiedChange$1 = memo(UnifiedChange);\nfunction UnifiedWidget(_ref) {\n  var hideGutter = _ref.hideGutter,\n    element = _ref.element;\n  return jsx(\"tr\", {\n    className: \"diff-widget\",\n    children: jsx(\"td\", {\n      colSpan: hideGutter ? 1 : 3,\n      className: \"diff-widget-content\",\n      children: element\n    })\n  });\n}\nvar _excluded$6 = [\"hideGutter\", \"selectedChanges\", \"tokens\", \"lineClassName\"],\n  _excluded2$2 = [\"hunk\", \"widgets\", \"className\"];\nfunction UnifiedHunk(props) {\n  var hunk = props.hunk,\n    widgets = props.widgets,\n    className = props.className,\n    childrenProps = _objectWithoutProperties(props, _excluded2$2),\n    elements = function (changes, widgets) {\n      return changes.reduce(function (elements, change) {\n        var key = getChangeKey(change);\n        elements.push([\"change\", key, change]);\n        var widget = widgets[key];\n        return widget && elements.push([\"widget\", key, widget]), elements;\n      }, []);\n    }(hunk.changes, widgets);\n  return jsx(\"tbody\", {\n    className: classnames(\"diff-hunk\", className),\n    children: elements.map(function (element) {\n      return function (_ref, props) {\n        var _ref2 = _slicedToArray(_ref, 3),\n          type = _ref2[0],\n          key = _ref2[1],\n          value = _ref2[2],\n          hideGutter = props.hideGutter,\n          selectedChanges = props.selectedChanges,\n          tokens = props.tokens,\n          lineClassName = props.lineClassName,\n          changeProps = _objectWithoutProperties(props, _excluded$6);\n        if (\"change\" === type) {\n          var side = isDelete(value) ? \"old\" : \"new\",\n            lineNumber = isDelete(value) ? computeOldLineNumber(value) : computeNewLineNumber(value),\n            tokensOfLine = tokens ? tokens[side][lineNumber - 1] : null;\n          return jsx(UnifiedChange$1, _objectSpread2({\n            className: lineClassName,\n            change: value,\n            hideGutter: hideGutter,\n            selected: selectedChanges.includes(key),\n            tokens: tokensOfLine\n          }, changeProps), \"change\".concat(key));\n        }\n        return \"widget\" === type ? jsx(UnifiedWidget, {\n          hideGutter: hideGutter,\n          element: value\n        }, \"widget\".concat(key)) : null;\n      }(element, childrenProps);\n    })\n  });\n}\nvar SIDE_OLD = 0;\nfunction useCallbackOnSide(side, setHover, change, customCallbacks) {\n  var markHover = useCallback(function () {\n      return setHover(side);\n    }, [side, setHover]),\n    unmarkHover = useCallback(function () {\n      return setHover(\"\");\n    }, [setHover]);\n  return useMemo(function () {\n    var callbacks = mapValues_1(customCallbacks, function (fn) {\n      return function (e) {\n        return fn && fn({\n          side: side,\n          change: change\n        }, e);\n      };\n    });\n    return callbacks.onMouseEnter = composeCallback(markHover, callbacks.onMouseEnter), callbacks.onMouseLeave = composeCallback(unmarkHover, callbacks.onMouseLeave), callbacks;\n  }, [change, customCallbacks, markHover, side, unmarkHover]);\n}\nfunction renderCells(args) {\n  var change = args.change,\n    side = args.side,\n    selected = args.selected,\n    tokens = args.tokens,\n    gutterClassName = args.gutterClassName,\n    codeClassName = args.codeClassName,\n    gutterEvents = args.gutterEvents,\n    codeEvents = args.codeEvents,\n    anchorID = args.anchorID,\n    gutterAnchor = args.gutterAnchor,\n    gutterAnchorTarget = args.gutterAnchorTarget,\n    hideGutter = args.hideGutter,\n    hover = args.hover,\n    renderToken = args.renderToken,\n    renderGutter = args.renderGutter;\n  if (!change) {\n    var _gutterClassNameValue = classnames(\"diff-gutter\", \"diff-gutter-omit\", gutterClassName),\n      _codeClassNameValue = classnames(\"diff-code\", \"diff-code-omit\", codeClassName);\n    return [!hideGutter && jsx(\"td\", {\n      className: _gutterClassNameValue\n    }, \"gutter\"), jsx(\"td\", {\n      className: _codeClassNameValue\n    }, \"code\")];\n  }\n  var type = change.type,\n    content = change.content,\n    changeKey = getChangeKey(change),\n    sideName = side === SIDE_OLD ? \"old\" : \"new\",\n    gutterProps = _objectSpread2({\n      id: anchorID || void 0,\n      className: classnames(\"diff-gutter\", \"diff-gutter-\".concat(type), _defineProperty$1({\n        \"diff-gutter-selected\": selected\n      }, \"diff-line-hover-\" + sideName, hover), gutterClassName),\n      children: renderGutter({\n        change: change,\n        side: sideName,\n        inHoverState: hover,\n        renderDefault: renderDefaultBy(change, sideName),\n        wrapInAnchor: wrapInAnchorBy(gutterAnchor, gutterAnchorTarget)\n      })\n    }, gutterEvents),\n    codeClassNameValue = classnames(\"diff-code\", \"diff-code-\".concat(type), _defineProperty$1({\n      \"diff-code-selected\": selected\n    }, \"diff-line-hover-\" + sideName, hover), codeClassName);\n  return [!hideGutter && jsx(\"td\", _objectSpread2(_objectSpread2({}, gutterProps), {}, {\n    \"data-change-key\": changeKey\n  }), \"gutter\"), jsx(CodeCell$1, _objectSpread2({\n    className: codeClassNameValue,\n    changeKey: changeKey,\n    text: content,\n    tokens: tokens,\n    renderToken: renderToken\n  }, codeEvents), \"code\")];\n}\nfunction SplitChange(props) {\n  var className = props.className,\n    oldChange = props.oldChange,\n    newChange = props.newChange,\n    oldSelected = props.oldSelected,\n    newSelected = props.newSelected,\n    oldTokens = props.oldTokens,\n    newTokens = props.newTokens,\n    monotonous = props.monotonous,\n    gutterClassName = props.gutterClassName,\n    codeClassName = props.codeClassName,\n    gutterEvents = props.gutterEvents,\n    codeEvents = props.codeEvents,\n    hideGutter = props.hideGutter,\n    generateAnchorID = props.generateAnchorID,\n    gutterAnchor = props.gutterAnchor,\n    renderToken = props.renderToken,\n    renderGutter = props.renderGutter,\n    _useState2 = _slicedToArray(useState(\"\"), 2),\n    hover = _useState2[0],\n    setHover = _useState2[1],\n    oldGutterEvents = useCallbackOnSide(\"old\", setHover, oldChange, gutterEvents),\n    newGutterEvents = useCallbackOnSide(\"new\", setHover, newChange, gutterEvents),\n    oldCodeEvents = useCallbackOnSide(\"old\", setHover, oldChange, codeEvents),\n    newCodeEvents = useCallbackOnSide(\"new\", setHover, newChange, codeEvents),\n    oldAnchorID = oldChange && generateAnchorID(oldChange),\n    newAnchorID = newChange && generateAnchorID(newChange),\n    commons = {\n      monotonous: monotonous,\n      hideGutter: hideGutter,\n      gutterClassName: gutterClassName,\n      codeClassName: codeClassName,\n      gutterEvents: gutterEvents,\n      codeEvents: codeEvents,\n      renderToken: renderToken,\n      renderGutter: renderGutter\n    },\n    oldArgs = _objectSpread2(_objectSpread2({}, commons), {}, {\n      change: oldChange,\n      side: SIDE_OLD,\n      selected: oldSelected,\n      tokens: oldTokens,\n      gutterEvents: oldGutterEvents,\n      codeEvents: oldCodeEvents,\n      anchorID: oldAnchorID,\n      gutterAnchor: gutterAnchor,\n      gutterAnchorTarget: oldAnchorID,\n      hover: \"old\" === hover\n    }),\n    newArgs = _objectSpread2(_objectSpread2({}, commons), {}, {\n      change: newChange,\n      side: 1,\n      selected: newSelected,\n      tokens: newTokens,\n      gutterEvents: newGutterEvents,\n      codeEvents: newCodeEvents,\n      anchorID: oldChange === newChange ? null : newAnchorID,\n      gutterAnchor: gutterAnchor,\n      gutterAnchorTarget: oldChange === newChange ? oldAnchorID : newAnchorID,\n      hover: \"new\" === hover\n    });\n  if (monotonous) return jsx(\"tr\", {\n    className: classnames(\"diff-line\", className),\n    children: renderCells(oldChange ? oldArgs : newArgs)\n  });\n  var lineTypeClassName = function (oldChange, newChange) {\n    return oldChange && !newChange ? \"diff-line-old-only\" : !oldChange && newChange ? \"diff-line-new-only\" : oldChange === newChange ? \"diff-line-normal\" : \"diff-line-compare\";\n  }(oldChange, newChange);\n  return jsxs(\"tr\", {\n    className: classnames(\"diff-line\", lineTypeClassName, className),\n    children: [renderCells(oldArgs), renderCells(newArgs)]\n  });\n}\nvar SplitChange$1 = memo(SplitChange);\nfunction SplitWidget(_ref) {\n  var hideGutter = _ref.hideGutter,\n    oldElement = _ref.oldElement,\n    newElement = _ref.newElement;\n  return _ref.monotonous ? jsx(\"tr\", {\n    className: \"diff-widget\",\n    children: jsx(\"td\", {\n      colSpan: hideGutter ? 1 : 2,\n      className: \"diff-widget-content\",\n      children: oldElement || newElement\n    })\n  }) : oldElement === newElement ? jsx(\"tr\", {\n    className: \"diff-widget\",\n    children: jsx(\"td\", {\n      colSpan: hideGutter ? 2 : 4,\n      className: \"diff-widget-content\",\n      children: oldElement\n    })\n  }) : jsxs(\"tr\", {\n    className: \"diff-widget\",\n    children: [jsx(\"td\", {\n      colSpan: hideGutter ? 1 : 2,\n      className: \"diff-widget-content\",\n      children: oldElement\n    }), jsx(\"td\", {\n      colSpan: hideGutter ? 1 : 2,\n      className: \"diff-widget-content\",\n      children: newElement\n    })]\n  });\n}\nvar _excluded$5 = [\"selectedChanges\", \"monotonous\", \"hideGutter\", \"tokens\", \"lineClassName\"],\n  _excluded2$1 = [\"hunk\", \"widgets\", \"className\"];\nfunction keyForPair(x, y) {\n  return (x ? getChangeKey(x) : \"00\") + (y ? getChangeKey(y) : \"00\");\n}\nfunction SplitHunk(props) {\n  var hunk = props.hunk,\n    widgets = props.widgets,\n    className = props.className,\n    childrenProps = _objectWithoutProperties(props, _excluded2$1),\n    elements = function (changes, widgets) {\n      for (var findWidget = function (change) {\n          if (!change) return null;\n          var key = getChangeKey(change);\n          return widgets[key] || null;\n        }, elements = [], i = 0; i < changes.length; i++) {\n        var current = changes[i];\n        if (isNormal(current)) elements.push([\"change\", keyForPair(current, current), current, current]);else if (isDelete(current)) {\n          var next = changes[i + 1];\n          next && isInsert(next) ? (i += 1, elements.push([\"change\", keyForPair(current, next), current, next])) : elements.push([\"change\", keyForPair(current, null), current, null]);\n        } else elements.push([\"change\", keyForPair(null, current), null, current]);\n        var rowChanges = elements[elements.length - 1],\n          oldWidget = findWidget(rowChanges[2]),\n          newWidget = findWidget(rowChanges[3]);\n        if (oldWidget || newWidget) {\n          var key = rowChanges[1];\n          elements.push([\"widget\", key, oldWidget, newWidget]);\n        }\n      }\n      return elements;\n    }(hunk.changes, widgets);\n  return jsx(\"tbody\", {\n    className: classnames(\"diff-hunk\", className),\n    children: elements.map(function (item) {\n      return function (_ref, props) {\n        var _ref2 = _slicedToArray(_ref, 4),\n          type = _ref2[0],\n          key = _ref2[1],\n          oldValue = _ref2[2],\n          newValue = _ref2[3],\n          selectedChanges = props.selectedChanges,\n          monotonous = props.monotonous,\n          hideGutter = props.hideGutter,\n          tokens = props.tokens,\n          lineClassName = props.lineClassName,\n          changeProps = _objectWithoutProperties(props, _excluded$5);\n        if (\"change\" === type) {\n          var oldSelected = !!oldValue && selectedChanges.includes(getChangeKey(oldValue)),\n            newSelected = !!newValue && selectedChanges.includes(getChangeKey(newValue)),\n            oldTokens = oldValue && tokens ? tokens.old[computeOldLineNumber(oldValue) - 1] : null,\n            newTokens = newValue && tokens ? tokens.new[computeNewLineNumber(newValue) - 1] : null;\n          return jsx(SplitChange$1, _objectSpread2({\n            className: lineClassName,\n            oldChange: oldValue,\n            newChange: newValue,\n            monotonous: monotonous,\n            hideGutter: hideGutter,\n            oldSelected: oldSelected,\n            newSelected: newSelected,\n            oldTokens: oldTokens,\n            newTokens: newTokens\n          }, changeProps), \"change\".concat(key));\n        }\n        return \"widget\" === type ? jsx(SplitWidget, {\n          monotonous: monotonous,\n          hideGutter: hideGutter,\n          oldElement: oldValue,\n          newElement: newValue\n        }, \"widget\".concat(key)) : null;\n      }(item, childrenProps);\n    })\n  });\n}\nvar _excluded$4 = [\"gutterType\", \"hunkClassName\"];\nfunction Hunk(_ref) {\n  var hunk = _ref.hunk,\n    _useDiffSettings = useDiffSettings(),\n    gutterType = _useDiffSettings.gutterType,\n    hunkClassName = _useDiffSettings.hunkClassName,\n    context = _objectWithoutProperties(_useDiffSettings, _excluded$4),\n    hideGutter = \"none\" === gutterType,\n    gutterAnchor = \"anchor\" === gutterType,\n    RenderingHunk = \"unified\" === context.viewType ? UnifiedHunk : SplitHunk;\n  return jsx(RenderingHunk, _objectSpread2(_objectSpread2({}, context), {}, {\n    hunk: hunk,\n    hideGutter: hideGutter,\n    gutterAnchor: gutterAnchor,\n    className: hunkClassName\n  }));\n}\nfunction noop() {}\nfunction setUserSelectStyle(element, selectable) {\n  var value = selectable ? \"auto\" : \"none\";\n  element instanceof HTMLElement && element.style.userSelect !== value && (element.style.userSelect = value);\n}\nfunction defaultRenderChildren(hunks) {\n  return hunks.map(function (hunk) {\n    return jsx(Hunk, {\n      hunk: hunk\n    }, function (hunk) {\n      return \"-\".concat(hunk.oldStart, \",\").concat(hunk.oldLines, \" +\").concat(hunk.newStart, \",\").concat(hunk.newLines);\n    }(hunk));\n  });\n}\nfunction Diff(props) {\n  var diffType = props.diffType,\n    hunks = props.hunks,\n    optimizeSelection = props.optimizeSelection,\n    className = props.className,\n    _props$hunkClassName = props.hunkClassName,\n    hunkClassName = void 0 === _props$hunkClassName ? DEFAULT_CONTEXT_VALUE.hunkClassName : _props$hunkClassName,\n    _props$lineClassName = props.lineClassName,\n    lineClassName = void 0 === _props$lineClassName ? DEFAULT_CONTEXT_VALUE.lineClassName : _props$lineClassName,\n    _props$gutterClassNam = props.gutterClassName,\n    gutterClassName = void 0 === _props$gutterClassNam ? DEFAULT_CONTEXT_VALUE.gutterClassName : _props$gutterClassNam,\n    _props$codeClassName = props.codeClassName,\n    codeClassName = void 0 === _props$codeClassName ? DEFAULT_CONTEXT_VALUE.codeClassName : _props$codeClassName,\n    _props$gutterType = props.gutterType,\n    gutterType = void 0 === _props$gutterType ? DEFAULT_CONTEXT_VALUE.gutterType : _props$gutterType,\n    _props$viewType = props.viewType,\n    viewType = void 0 === _props$viewType ? DEFAULT_CONTEXT_VALUE.viewType : _props$viewType,\n    _props$gutterEvents = props.gutterEvents,\n    gutterEvents = void 0 === _props$gutterEvents ? DEFAULT_CONTEXT_VALUE.gutterEvents : _props$gutterEvents,\n    _props$codeEvents = props.codeEvents,\n    codeEvents = void 0 === _props$codeEvents ? DEFAULT_CONTEXT_VALUE.codeEvents : _props$codeEvents,\n    _props$generateAnchor = props.generateAnchorID,\n    generateAnchorID = void 0 === _props$generateAnchor ? DEFAULT_CONTEXT_VALUE.generateAnchorID : _props$generateAnchor,\n    _props$selectedChange = props.selectedChanges,\n    selectedChanges = void 0 === _props$selectedChange ? DEFAULT_CONTEXT_VALUE.selectedChanges : _props$selectedChange,\n    _props$widgets = props.widgets,\n    widgets = void 0 === _props$widgets ? DEFAULT_CONTEXT_VALUE.widgets : _props$widgets,\n    _props$renderGutter = props.renderGutter,\n    renderGutter = void 0 === _props$renderGutter ? DEFAULT_CONTEXT_VALUE.renderGutter : _props$renderGutter,\n    tokens = props.tokens,\n    renderToken = props.renderToken,\n    _props$children = props.children,\n    children = void 0 === _props$children ? defaultRenderChildren : _props$children,\n    root = useRef(null),\n    enableColumnSelection = useCallback(function (_ref) {\n      var target = _ref.target;\n      if (0 === _ref.button) {\n        var closestCell = function (target, className) {\n          for (var current = target; current && current !== document.documentElement && !current.classList.contains(className);) current = current.parentElement;\n          return current === document.documentElement ? null : current;\n        }(target, \"diff-code\");\n        if (closestCell && closestCell.parentElement) {\n          var selection = window.getSelection();\n          selection && selection.removeAllRanges();\n          var index = _toConsumableArray(closestCell.parentElement.children).indexOf(closestCell);\n          if (1 === index || 3 === index) {\n            var _step,\n              _iterator = _createForOfIteratorHelper(root.current ? root.current.querySelectorAll(\".diff-line\") : []);\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var cells = _step.value.children;\n                setUserSelectStyle(cells[1], 1 === index), setUserSelectStyle(cells[3], 3 === index);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n        }\n      }\n    }, []),\n    hideGutter = \"none\" === gutterType,\n    monotonous = \"add\" === diffType || \"delete\" === diffType,\n    onTableMouseDown = \"split\" === viewType && !monotonous && optimizeSelection ? enableColumnSelection : noop,\n    cols = useMemo(function () {\n      return jsxs(\"colgroup\", \"unified\" === viewType ? {\n        children: [!hideGutter && jsx(\"col\", {\n          className: \"diff-gutter-col\"\n        }), !hideGutter && jsx(\"col\", {\n          className: \"diff-gutter-col\"\n        }), jsx(\"col\", {})]\n      } : monotonous ? {\n        children: [!hideGutter && jsx(\"col\", {\n          className: \"diff-gutter-col\"\n        }), jsx(\"col\", {})]\n      } : {\n        children: [!hideGutter && jsx(\"col\", {\n          className: \"diff-gutter-col\"\n        }), jsx(\"col\", {}), !hideGutter && jsx(\"col\", {\n          className: \"diff-gutter-col\"\n        }), jsx(\"col\", {})]\n      });\n    }, [viewType, monotonous, hideGutter]),\n    settingsContextValue = useMemo(function () {\n      return {\n        hunkClassName: hunkClassName,\n        lineClassName: lineClassName,\n        gutterClassName: gutterClassName,\n        codeClassName: codeClassName,\n        monotonous: monotonous,\n        hideGutter: hideGutter,\n        viewType: viewType,\n        gutterType: gutterType,\n        codeEvents: codeEvents,\n        gutterEvents: gutterEvents,\n        generateAnchorID: generateAnchorID,\n        selectedChanges: selectedChanges,\n        widgets: widgets,\n        renderGutter: renderGutter,\n        tokens: tokens,\n        renderToken: renderToken\n      };\n    }, [codeClassName, codeEvents, generateAnchorID, gutterClassName, gutterEvents, gutterType, hideGutter, hunkClassName, lineClassName, monotonous, renderGutter, renderToken, selectedChanges, tokens, viewType, widgets]);\n  return jsx(Provider, {\n    value: settingsContextValue,\n    children: jsxs(\"table\", {\n      ref: root,\n      className: classnames(\"diff\", \"diff-\".concat(viewType), className),\n      onMouseDown: onTableMouseDown,\n      children: [cols, children(hunks)]\n    })\n  });\n}\nvar index = memo(Diff),\n  warning = function () {};\nif (\"production\" !== process.env.NODE_ENV) {\n  var printWarning = function (format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) args[key - 1] = arguments[key];\n    var argIndex = 0,\n      message = \"Warning: \" + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n    \"undefined\" != typeof console && console.error(message);\n    try {\n      throw new Error(message);\n    } catch (x) {}\n  };\n  warning = function (condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) args[key - 2] = arguments[key];\n    if (void 0 === format) throw new Error(\"`warning(condition, format, ...args)` requires a warning message argument\");\n    condition || printWarning.apply(null, [format].concat(args));\n  };\n}\nvar warning_1 = warning;\nfunction SplitDecoration(props) {\n  var hideGutter = props.hideGutter,\n    monotonous = props.monotonous,\n    className = props.className,\n    gutterClassName = props.gutterClassName,\n    contentClassName = props.contentClassName,\n    children = props.children,\n    computedClassName = classnames(\"diff-decoration\", className),\n    computedGutterClassName = classnames(\"diff-decoration-gutter\", gutterClassName),\n    computedContentClassName = classnames(\"diff-decoration-content\", contentClassName),\n    columnCount = (hideGutter ? 2 : 4) / (monotonous ? 2 : 1),\n    headerContentColSpan = columnCount - (hideGutter ? 0 : 1);\n  if (1 === Children.count(children)) return jsx(\"tbody\", {\n    className: computedClassName,\n    children: jsx(\"tr\", {\n      children: jsx(\"td\", {\n        colSpan: columnCount,\n        className: computedContentClassName,\n        children: children\n      })\n    })\n  });\n  var _children = _slicedToArray(children, 2),\n    gutter = _children[0],\n    content = _children[1];\n  return jsx(\"tbody\", {\n    className: computedClassName,\n    children: jsxs(\"tr\", {\n      children: [!hideGutter && jsx(\"td\", {\n        className: computedGutterClassName,\n        children: gutter\n      }), jsx(\"td\", {\n        colSpan: headerContentColSpan,\n        className: computedContentClassName,\n        children: content\n      })]\n    })\n  });\n}\nfunction UnifiedDecoration(props) {\n  var hideGutter = props.hideGutter,\n    className = props.className,\n    gutterClassName = props.gutterClassName,\n    contentClassName = props.contentClassName,\n    children = props.children,\n    computedClassName = classnames(\"diff-decoration\", className),\n    computedGutterClassName = classnames(\"diff-decoration-gutter\", gutterClassName),\n    computedContentClassName = classnames(\"diff-decoration-content\", contentClassName);\n  if (1 === Children.count(children)) return jsx(\"tbody\", {\n    className: computedClassName,\n    children: jsx(\"tr\", {\n      children: jsx(\"td\", {\n        colSpan: hideGutter ? 1 : 3,\n        className: computedContentClassName,\n        children: children\n      })\n    })\n  });\n  var _children = _slicedToArray(children, 2),\n    gutter = _children[0],\n    content = _children[1];\n  return jsx(\"tbody\", {\n    className: computedClassName,\n    children: jsxs(\"tr\", {\n      children: [!hideGutter && jsx(\"td\", {\n        colSpan: 2,\n        className: computedGutterClassName,\n        children: gutter\n      }), jsx(\"td\", {\n        className: computedContentClassName,\n        children: content\n      })]\n    })\n  });\n}\nfunction Decoration(props) {\n  var _props$className = props.className,\n    className = void 0 === _props$className ? \"\" : _props$className,\n    _props$gutterClassNam = props.gutterClassName,\n    gutterClassName = void 0 === _props$gutterClassNam ? \"\" : _props$gutterClassNam,\n    _props$contentClassNa = props.contentClassName,\n    contentClassName = void 0 === _props$contentClassNa ? \"\" : _props$contentClassNa,\n    children = props.children,\n    _useDiffSettings = useDiffSettings(),\n    viewType = _useDiffSettings.viewType,\n    gutterType = _useDiffSettings.gutterType,\n    monotonous = _useDiffSettings.monotonous,\n    RenderingDecoration = \"split\" === viewType ? SplitDecoration : UnifiedDecoration,\n    childrenCount = Children.count(children),\n    hideGutter = \"none\" === gutterType;\n  return warning_1(childrenCount <= 2, \"Decoration only accepts a maxium of 2 children\"), warning_1(childrenCount < 2 || !hideGutter, \"Gutter element in decoration will not be rendered since hideGutter prop is set to true\"), jsx(RenderingDecoration, {\n    hideGutter: hideGutter,\n    monotonous: monotonous,\n    className: className,\n    gutterClassName: gutterClassName,\n    contentClassName: contentClassName,\n    children: children\n  });\n}\nvar _arrayAggregator = function (array, setter, iteratee, accumulator) {\n  for (var index = -1, length = null == array ? 0 : array.length; ++index < length;) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n};\nvar _createBaseEach = function (eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (null == collection) return collection;\n      if (!isArrayLike_1(collection)) return eachFunc(collection, iteratee);\n      for (var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection); (fromRight ? index-- : ++index < length) && !1 !== iteratee(iterable[index], index, iterable););\n      return collection;\n    };\n  },\n  _baseEach = _createBaseEach(_baseForOwn);\nvar _baseAggregator = function (collection, setter, iteratee, accumulator) {\n  return _baseEach(collection, function (value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  }), accumulator;\n};\nvar _createAggregator = function (setter, initializer) {\n    return function (collection, iteratee) {\n      var func = isArray_1(collection) ? _arrayAggregator : _baseAggregator,\n        accumulator = initializer ? initializer() : {};\n      return func(collection, setter, _baseIteratee(iteratee), accumulator);\n    };\n  },\n  keyBy_1 = _createAggregator(function (result, value, key) {\n    _baseAssignValue(result, key, value);\n  }),\n  spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : void 0;\nvar _isFlattenable = function (value) {\n  return isArray_1(value) || isArguments_1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n};\nvar _baseFlatten = function baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n    length = array.length;\n  for (predicate || (predicate = _isFlattenable), result || (result = []); ++index < length;) {\n    var value = array[index];\n    depth > 0 && predicate(value) ? depth > 1 ? baseFlatten(value, depth - 1, predicate, isStrict, result) : _arrayPush(result, value) : isStrict || (result[result.length] = value);\n  }\n  return result;\n};\nvar _baseMap = function (collection, iteratee) {\n  var index = -1,\n    result = isArrayLike_1(collection) ? Array(collection.length) : [];\n  return _baseEach(collection, function (value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  }), result;\n};\nvar map_1 = function (collection, iteratee) {\n  return (isArray_1(collection) ? _arrayMap : _baseMap)(collection, _baseIteratee(iteratee));\n};\nvar flatMap_1 = function (collection, iteratee) {\n  return _baseFlatten(map_1(collection, iteratee), 1);\n};\nfunction applyHunk(linesOfCode, _ref) {\n  var newStart = _ref.newStart,\n    _changes$reduce = _ref.changes.reduce(function (_ref2, change) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        lines = _ref3[0],\n        cursor = _ref3[1];\n      return isDelete(change) ? (lines.splice(cursor, 1), [lines, cursor]) : (isInsert(change) && lines.splice(cursor, 0, change.content), [lines, cursor + 1]);\n    }, [linesOfCode, newStart - 1]);\n  return _slicedToArray(_changes$reduce, 1)[0];\n}\nfunction mapChanges(changes, side, toValue) {\n  if (!changes.length) return [];\n  var computeLineNumber = \"old\" === side ? computeOldLineNumber : computeNewLineNumber,\n    changesByLineNumber = keyBy_1(changes, computeLineNumber),\n    maxLineNumber = computeLineNumber(changes[changes.length - 1]);\n  return Array.from({\n    length: maxLineNumber\n  }).map(function (value, i) {\n    return toValue(changesByLineNumber[i + 1]);\n  });\n}\nfunction toTextPair(hunks) {\n  var _groupChanges = function (hunks) {\n      return flatMap_1(hunks, function (hunk) {\n        return hunk.changes;\n      }).reduce(function (_ref4, change) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          oldChanges = _ref5[0],\n          newChanges = _ref5[1];\n        return isNormal(change) ? (oldChanges.push(change), newChanges.push(change)) : isDelete(change) ? oldChanges.push(change) : newChanges.push(change), [oldChanges, newChanges];\n      }, [[], []]);\n    }(hunks),\n    _groupChanges2 = _slicedToArray(_groupChanges, 2),\n    oldChanges = _groupChanges2[0],\n    newChanges = _groupChanges2[1],\n    toText = function (change) {\n      return change ? change.content : \"\";\n    };\n  return [mapChanges(oldChanges, \"old\", toText).join(\"\\n\"), mapChanges(newChanges, \"new\", toText).join(\"\\n\")];\n}\nfunction createRoot(children) {\n  return {\n    type: \"root\",\n    children: children\n  };\n}\nfunction toTokenTrees(hunks, options) {\n  if (options.oldSource) {\n    var newSource = function (oldSource, hunks) {\n        return hunks.reduce(applyHunk, oldSource.split(\"\\n\")).join(\"\\n\");\n      }(options.oldSource, hunks),\n      highlightText = options.highlight ? function (text) {\n        return options.refractor.highlight(text, options.language);\n      } : function (text) {\n        return [{\n          type: \"text\",\n          value: text\n        }];\n      };\n    return [createRoot(highlightText(options.oldSource)), createRoot(highlightText(newSource))];\n  }\n  var _toTextPair2 = _slicedToArray(toTextPair(hunks), 2),\n    oldText = _toTextPair2[0],\n    newText = _toTextPair2[1],\n    toTree = options.highlight ? function (text) {\n      return createRoot(options.refractor.highlight(text, options.language));\n    } : function (text) {\n      return createRoot([{\n        type: \"text\",\n        value: text\n      }]);\n    };\n  return [toTree(oldText), toTree(newText)];\n}\nfunction clone(path) {\n  return path.map(function (node) {\n    return _objectSpread2({}, node);\n  });\n}\nfunction replace(path, leaf) {\n  return [].concat(_toConsumableArray(clone(path.slice(0, -1))), [leaf]);\n}\nfunction leafOf(path) {\n  var last = path[path.length - 1];\n  if (\"text\" === last.type) return last;\n  throw new Error(\"Invalid token path with leaf of type \".concat(last.type));\n}\nfunction split(path, splitStart, splitEnd, wrapSplitNode) {\n  var parents = path.slice(0, -1),\n    leaf = leafOf(path),\n    output = [];\n  if (splitEnd <= 0 || splitStart >= (null == leaf ? void 0 : leaf.value.length)) return [path];\n  var split = function (start, end) {\n    var value = leaf.value.slice(start, end);\n    return [].concat(_toConsumableArray(parents), [_objectSpread2(_objectSpread2({}, leaf), {}, {\n      value: value\n    })]);\n  };\n  if (splitStart > 0) {\n    var head = split(0, splitStart);\n    output.push(clone(head));\n  }\n  var body = split(Math.max(splitStart, 0), splitEnd);\n  if (output.push(wrapSplitNode ? function (path, parent) {\n    return [parent].concat(_toConsumableArray(clone(path)));\n  }(body, wrapSplitNode) : clone(body)), splitEnd < leaf.value.length) {\n    var tail = split(splitEnd);\n    output.push(clone(tail));\n  }\n  return output;\n}\nvar _excluded$3 = [\"children\"];\nfunction treeToPathList(node) {\n  var output = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],\n    path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [];\n  if (node.children) {\n    var children = node.children,\n      nodeToUse = _objectWithoutProperties(node, _excluded$3);\n    path.push(nodeToUse);\n    var _step,\n      _iterator = _createForOfIteratorHelper(children);\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        treeToPathList(_step.value, output, path);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    path.pop();\n  } else output.push(clone([].concat(_toConsumableArray(path.slice(1)), [node])));\n  return output;\n}\nfunction splitByLineBreak(paths) {\n  return paths.reduce(function (lines, path) {\n    var currentLine = lines[lines.length - 1],\n      _splitPathToLines = function (path) {\n        var leaf = leafOf(path);\n        return leaf.value.includes(\"\\n\") ? leaf.value.split(\"\\n\").map(function (line) {\n          return replace(path, _objectSpread2(_objectSpread2({}, leaf), {}, {\n            value: line\n          }));\n        }) : [path];\n      }(path),\n      _splitPathToLines2 = _toArray(_splitPathToLines),\n      currentRemaining = _splitPathToLines2[0],\n      nextLines = _splitPathToLines2.slice(1);\n    return [].concat(_toConsumableArray(lines.slice(0, -1)), [[].concat(_toConsumableArray(currentLine), [currentRemaining])], _toConsumableArray(nextLines.map(function (path) {\n      return [path];\n    })));\n  }, [[]]);\n}\nfunction normalizeToLines(tree) {\n  return splitByLineBreak(treeToPathList(tree));\n}\nvar isEqualWith_1 = function (value, other, customizer) {\n  var result = (customizer = \"function\" == typeof customizer ? customizer : void 0) ? customizer(value, other) : void 0;\n  return void 0 === result ? _baseIsEqual(value, other, void 0, customizer) : !!result;\n};\nvar isEqual_1 = function (value, other) {\n  return _baseIsEqual(value, other);\n};\nvar last_1 = function (array) {\n  var length = null == array ? 0 : array.length;\n  return length ? array[length - 1] : void 0;\n};\nfunction attachNode(parent, node) {\n  if (!parent.children) throw new Error(\"parent node missing children property\");\n  var x,\n    y,\n    previousSibling = last_1(parent.children);\n  return previousSibling && (y = node, (x = previousSibling).type === y.type && (\"text\" === x.type || x.children && y.children && isEqualWith_1(x, y, function (x, y, name) {\n    return \"chlidren\" === name || isEqual_1(x, y);\n  }))) ? parent.children[parent.children.length - 1] = function (x, y) {\n    return \"value\" in x && \"value\" in y ? _objectSpread2(_objectSpread2({}, x), {}, {\n      value: \"\".concat(x.value).concat(y.value)\n    }) : x;\n  }(previousSibling, node) : parent.children.push(node), parent.children[parent.children.length - 1];\n}\nfunction backToTree(pathList) {\n  var _step,\n    root = {\n      type: \"root\",\n      children: []\n    },\n    _iterator = _createForOfIteratorHelper(pathList);\n  try {\n    var _loop = function () {\n      var path = _step.value;\n      path.reduce(function (parent, node, i) {\n        return attachNode(parent, i === path.length - 1 ? _objectSpread2({}, node) : _objectSpread2(_objectSpread2({}, node), {}, {\n          children: []\n        }));\n      }, root);\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) _loop();\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return root;\n}\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty,\n  groupBy_1 = _createAggregator(function (result, value, key) {\n    hasOwnProperty$1.call(result, key) ? result[key].push(value) : _baseAssignValue(result, key, [value]);\n  }),\n  hasOwnProperty = Object.prototype.hasOwnProperty;\nvar isEmpty_1 = function (value) {\n    if (null == value) return !0;\n    if (isArrayLike_1(value) && (isArray_1(value) || \"string\" == typeof value || \"function\" == typeof value.splice || isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) return !value.length;\n    var tag = _getTag(value);\n    if (\"[object Map]\" == tag || \"[object Set]\" == tag) return !value.size;\n    if (_isPrototype(value)) return !_baseKeys(value).length;\n    for (var key in value) if (hasOwnProperty.call(value, key)) return !1;\n    return !0;\n  },\n  splitPathToEncloseRange = function (paths, node) {\n    var start = node.start,\n      length = node.length,\n      rangeEnd = start + length,\n      _paths$reduce = paths.reduce(function (_ref, path) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          output = _ref2[0],\n          nodeStart = _ref2[1],\n          nodeEnd = nodeStart + leafOf(path).value.length;\n        if (nodeStart > rangeEnd || nodeEnd < start) output.push(path);else {\n          var segments = split(path, start - nodeStart, rangeEnd - nodeStart, node);\n          output.push.apply(output, _toConsumableArray(segments));\n        }\n        return [output, nodeEnd];\n      }, [[], 0]);\n    return _slicedToArray(_paths$reduce, 1)[0];\n  };\nfunction process$1(linesOfPaths, ranges) {\n  var rangesByLine = groupBy_1(ranges, \"lineNumber\");\n  return linesOfPaths.map(function (line, i) {\n    return function (paths, ranges) {\n      return isEmpty_1(ranges) ? paths : ranges.reduce(splitPathToEncloseRange, paths);\n    }(line, rangesByLine[i + 1]);\n  });\n}\nfunction pickRanges(oldRanges, newRanges) {\n  return function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      oldLinesOfPaths = _ref4[0],\n      newLinesOfPaths = _ref4[1];\n    return [process$1(oldLinesOfPaths, oldRanges), process$1(newLinesOfPaths, newRanges)];\n  };\n}\nvar flatten_1 = function (array) {\n    return (null == array ? 0 : array.length) ? _baseFlatten(array, 1) : [];\n  },\n  nativeMax = Math.max;\nvar findIndex_1 = function (array, predicate, fromIndex) {\n    var length = null == array ? 0 : array.length;\n    if (!length) return -1;\n    var index = null == fromIndex ? 0 : toInteger_1(fromIndex);\n    return index < 0 && (index = nativeMax(length + index, 0)), _baseFindIndex(array, _baseIteratee(predicate), index);\n  },\n  diffMatchPatch = createCommonjsModule(function (module) {\n    var diff_match_patch = function () {\n      this.Diff_Timeout = 1, this.Diff_EditCost = 4, this.Match_Threshold = .5, this.Match_Distance = 1e3, this.Patch_DeleteThreshold = .5, this.Patch_Margin = 4, this.Match_MaxBits = 32;\n    };\n    diff_match_patch.Diff = function (op, text) {\n      return [op, text];\n    }, diff_match_patch.prototype.diff_main = function (text1, text2, opt_checklines, opt_deadline) {\n      void 0 === opt_deadline && (opt_deadline = this.Diff_Timeout <= 0 ? Number.MAX_VALUE : new Date().getTime() + 1e3 * this.Diff_Timeout);\n      var deadline = opt_deadline;\n      if (null == text1 || null == text2) throw new Error(\"Null input. (diff_main)\");\n      if (text1 == text2) return text1 ? [new diff_match_patch.Diff(0, text1)] : [];\n      void 0 === opt_checklines && (opt_checklines = !0);\n      var checklines = opt_checklines,\n        commonlength = this.diff_commonPrefix(text1, text2),\n        commonprefix = text1.substring(0, commonlength);\n      text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = this.diff_commonSuffix(text1, text2);\n      var commonsuffix = text1.substring(text1.length - commonlength);\n      text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n      var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n      return commonprefix && diffs.unshift(new diff_match_patch.Diff(0, commonprefix)), commonsuffix && diffs.push(new diff_match_patch.Diff(0, commonsuffix)), this.diff_cleanupMerge(diffs), diffs;\n    }, diff_match_patch.prototype.diff_compute_ = function (text1, text2, checklines, deadline) {\n      var diffs;\n      if (!text1) return [new diff_match_patch.Diff(1, text2)];\n      if (!text2) return [new diff_match_patch.Diff(-1, text1)];\n      var longtext = text1.length > text2.length ? text1 : text2,\n        shorttext = text1.length > text2.length ? text2 : text1,\n        i = longtext.indexOf(shorttext);\n      if (-1 != i) return diffs = [new diff_match_patch.Diff(1, longtext.substring(0, i)), new diff_match_patch.Diff(0, shorttext), new diff_match_patch.Diff(1, longtext.substring(i + shorttext.length))], text1.length > text2.length && (diffs[0][0] = diffs[2][0] = -1), diffs;\n      if (1 == shorttext.length) return [new diff_match_patch.Diff(-1, text1), new diff_match_patch.Diff(1, text2)];\n      var hm = this.diff_halfMatch_(text1, text2);\n      if (hm) {\n        var text1_a = hm[0],\n          text1_b = hm[1],\n          text2_a = hm[2],\n          text2_b = hm[3],\n          mid_common = hm[4],\n          diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline),\n          diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n        return diffs_a.concat([new diff_match_patch.Diff(0, mid_common)], diffs_b);\n      }\n      return checklines && text1.length > 100 && text2.length > 100 ? this.diff_lineMode_(text1, text2, deadline) : this.diff_bisect_(text1, text2, deadline);\n    }, diff_match_patch.prototype.diff_lineMode_ = function (text1, text2, deadline) {\n      var a = this.diff_linesToChars_(text1, text2);\n      text1 = a.chars1, text2 = a.chars2;\n      var linearray = a.lineArray,\n        diffs = this.diff_main(text1, text2, !1, deadline);\n      this.diff_charsToLines_(diffs, linearray), this.diff_cleanupSemantic(diffs), diffs.push(new diff_match_patch.Diff(0, \"\"));\n      for (var pointer = 0, count_delete = 0, count_insert = 0, text_delete = \"\", text_insert = \"\"; pointer < diffs.length;) {\n        switch (diffs[pointer][0]) {\n          case 1:\n            count_insert++, text_insert += diffs[pointer][1];\n            break;\n          case -1:\n            count_delete++, text_delete += diffs[pointer][1];\n            break;\n          case 0:\n            if (count_delete >= 1 && count_insert >= 1) {\n              diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert), pointer = pointer - count_delete - count_insert;\n              for (var subDiff = this.diff_main(text_delete, text_insert, !1, deadline), j = subDiff.length - 1; j >= 0; j--) diffs.splice(pointer, 0, subDiff[j]);\n              pointer += subDiff.length;\n            }\n            count_insert = 0, count_delete = 0, text_delete = \"\", text_insert = \"\";\n        }\n        pointer++;\n      }\n      return diffs.pop(), diffs;\n    }, diff_match_patch.prototype.diff_bisect_ = function (text1, text2, deadline) {\n      for (var text1_length = text1.length, text2_length = text2.length, max_d = Math.ceil((text1_length + text2_length) / 2), v_offset = max_d, v_length = 2 * max_d, v1 = new Array(v_length), v2 = new Array(v_length), x = 0; x < v_length; x++) v1[x] = -1, v2[x] = -1;\n      v1[v_offset + 1] = 0, v2[v_offset + 1] = 0;\n      for (var delta = text1_length - text2_length, front = delta % 2 != 0, k1start = 0, k1end = 0, k2start = 0, k2end = 0, d = 0; d < max_d && !(new Date().getTime() > deadline); d++) {\n        for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n          for (var k1_offset = v_offset + k1, y1 = (x1 = k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1] ? v1[k1_offset + 1] : v1[k1_offset - 1] + 1) - k1; x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1);) x1++, y1++;\n          if (v1[k1_offset] = x1, x1 > text1_length) k1end += 2;else if (y1 > text2_length) k1start += 2;else if (front) {\n            if ((k2_offset = v_offset + delta - k1) >= 0 && k2_offset < v_length && -1 != v2[k2_offset]) if (x1 >= (x2 = text1_length - v2[k2_offset])) return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n        for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n          for (var x2, k2_offset = v_offset + k2, y2 = (x2 = k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1] ? v2[k2_offset + 1] : v2[k2_offset - 1] + 1) - k2; x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1);) x2++, y2++;\n          if (v2[k2_offset] = x2, x2 > text1_length) k2end += 2;else if (y2 > text2_length) k2start += 2;else if (!front) {\n            if ((k1_offset = v_offset + delta - k2) >= 0 && k1_offset < v_length && -1 != v1[k1_offset]) {\n              var x1;\n              y1 = v_offset + (x1 = v1[k1_offset]) - k1_offset;\n              if (x1 >= (x2 = text1_length - x2)) return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n            }\n          }\n        }\n      }\n      return [new diff_match_patch.Diff(-1, text1), new diff_match_patch.Diff(1, text2)];\n    }, diff_match_patch.prototype.diff_bisectSplit_ = function (text1, text2, x, y, deadline) {\n      var text1a = text1.substring(0, x),\n        text2a = text2.substring(0, y),\n        text1b = text1.substring(x),\n        text2b = text2.substring(y),\n        diffs = this.diff_main(text1a, text2a, !1, deadline),\n        diffsb = this.diff_main(text1b, text2b, !1, deadline);\n      return diffs.concat(diffsb);\n    }, diff_match_patch.prototype.diff_linesToChars_ = function (text1, text2) {\n      var lineArray = [],\n        lineHash = {};\n      function diff_linesToCharsMunge_(text) {\n        for (var chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length; lineEnd < text.length - 1;) {\n          -1 == (lineEnd = text.indexOf(\"\\n\", lineStart)) && (lineEnd = text.length - 1);\n          var line = text.substring(lineStart, lineEnd + 1);\n          (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : void 0 !== lineHash[line]) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength == maxLines && (line = text.substring(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n        }\n        return chars;\n      }\n      lineArray[0] = \"\";\n      var maxLines = 4e4,\n        chars1 = diff_linesToCharsMunge_(text1);\n      return maxLines = 65535, {\n        chars1: chars1,\n        chars2: diff_linesToCharsMunge_(text2),\n        lineArray: lineArray\n      };\n    }, diff_match_patch.prototype.diff_charsToLines_ = function (diffs, lineArray) {\n      for (var i = 0; i < diffs.length; i++) {\n        for (var chars = diffs[i][1], text = [], j = 0; j < chars.length; j++) text[j] = lineArray[chars.charCodeAt(j)];\n        diffs[i][1] = text.join(\"\");\n      }\n    }, diff_match_patch.prototype.diff_commonPrefix = function (text1, text2) {\n      if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) return 0;\n      for (var pointermin = 0, pointermax = Math.min(text1.length, text2.length), pointermid = pointermax, pointerstart = 0; pointermin < pointermid;) text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid) ? pointerstart = pointermin = pointermid : pointermax = pointermid, pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n      return pointermid;\n    }, diff_match_patch.prototype.diff_commonSuffix = function (text1, text2) {\n      if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) return 0;\n      for (var pointermin = 0, pointermax = Math.min(text1.length, text2.length), pointermid = pointermax, pointerend = 0; pointermin < pointermid;) text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend) ? pointerend = pointermin = pointermid : pointermax = pointermid, pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n      return pointermid;\n    }, diff_match_patch.prototype.diff_commonOverlap_ = function (text1, text2) {\n      var text1_length = text1.length,\n        text2_length = text2.length;\n      if (0 == text1_length || 0 == text2_length) return 0;\n      text1_length > text2_length ? text1 = text1.substring(text1_length - text2_length) : text1_length < text2_length && (text2 = text2.substring(0, text1_length));\n      var text_length = Math.min(text1_length, text2_length);\n      if (text1 == text2) return text_length;\n      for (var best = 0, length = 1;;) {\n        var pattern = text1.substring(text_length - length),\n          found = text2.indexOf(pattern);\n        if (-1 == found) return best;\n        length += found, 0 != found && text1.substring(text_length - length) != text2.substring(0, length) || (best = length, length++);\n      }\n    }, diff_match_patch.prototype.diff_halfMatch_ = function (text1, text2) {\n      if (this.Diff_Timeout <= 0) return null;\n      var longtext = text1.length > text2.length ? text1 : text2,\n        shorttext = text1.length > text2.length ? text2 : text1;\n      if (longtext.length < 4 || 2 * shorttext.length < longtext.length) return null;\n      var dmp = this;\n      function diff_halfMatchI_(longtext, shorttext, i) {\n        for (var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, seed = longtext.substring(i, i + Math.floor(longtext.length / 4)), j = -1, best_common = \"\"; -1 != (j = shorttext.indexOf(seed, j + 1));) {\n          var prefixLength = dmp.diff_commonPrefix(longtext.substring(i), shorttext.substring(j)),\n            suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n          best_common.length < suffixLength + prefixLength && (best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength), best_longtext_a = longtext.substring(0, i - suffixLength), best_longtext_b = longtext.substring(i + prefixLength), best_shorttext_a = shorttext.substring(0, j - suffixLength), best_shorttext_b = shorttext.substring(j + prefixLength));\n        }\n        return 2 * best_common.length >= longtext.length ? [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common] : null;\n      }\n      var hm,\n        text1_a,\n        text1_b,\n        text2_a,\n        text2_b,\n        hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)),\n        hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n      return hm1 || hm2 ? (hm = hm2 ? hm1 && hm1[4].length > hm2[4].length ? hm1 : hm2 : hm1, text1.length > text2.length ? (text1_a = hm[0], text1_b = hm[1], text2_a = hm[2], text2_b = hm[3]) : (text2_a = hm[0], text2_b = hm[1], text1_a = hm[2], text1_b = hm[3]), [text1_a, text1_b, text2_a, text2_b, hm[4]]) : null;\n    }, diff_match_patch.prototype.diff_cleanupSemantic = function (diffs) {\n      for (var changes = !1, equalities = [], equalitiesLength = 0, lastEquality = null, pointer = 0, length_insertions1 = 0, length_deletions1 = 0, length_insertions2 = 0, length_deletions2 = 0; pointer < diffs.length;) 0 == diffs[pointer][0] ? (equalities[equalitiesLength++] = pointer, length_insertions1 = length_insertions2, length_deletions1 = length_deletions2, length_insertions2 = 0, length_deletions2 = 0, lastEquality = diffs[pointer][1]) : (1 == diffs[pointer][0] ? length_insertions2 += diffs[pointer][1].length : length_deletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(length_insertions2, length_deletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(-1, lastEquality)), diffs[equalities[equalitiesLength - 1] + 1][0] = 1, equalitiesLength--, pointer = --equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, length_insertions1 = 0, length_deletions1 = 0, length_insertions2 = 0, length_deletions2 = 0, lastEquality = null, changes = !0)), pointer++;\n      for (changes && this.diff_cleanupMerge(diffs), this.diff_cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length;) {\n        if (-1 == diffs[pointer - 1][0] && 1 == diffs[pointer][0]) {\n          var deletion = diffs[pointer - 1][1],\n            insertion = diffs[pointer][1],\n            overlap_length1 = this.diff_commonOverlap_(deletion, insertion),\n            overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n          overlap_length1 >= overlap_length2 ? (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) && (diffs.splice(pointer, 0, new diff_match_patch.Diff(0, insertion.substring(0, overlap_length1))), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1), diffs[pointer + 1][1] = insertion.substring(overlap_length1), pointer++) : (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) && (diffs.splice(pointer, 0, new diff_match_patch.Diff(0, deletion.substring(0, overlap_length2))), diffs[pointer - 1][0] = 1, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2), diffs[pointer + 1][0] = -1, diffs[pointer + 1][1] = deletion.substring(overlap_length2), pointer++), pointer++;\n        }\n        pointer++;\n      }\n    }, diff_match_patch.prototype.diff_cleanupSemanticLossless = function (diffs) {\n      function diff_cleanupSemanticScore_(one, two) {\n        if (!one || !two) return 6;\n        var char1 = one.charAt(one.length - 1),\n          char2 = two.charAt(0),\n          nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_),\n          nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_),\n          whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_),\n          whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_),\n          lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_),\n          lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_),\n          blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_),\n          blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);\n        return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n      }\n      for (var pointer = 1; pointer < diffs.length - 1;) {\n        if (0 == diffs[pointer - 1][0] && 0 == diffs[pointer + 1][0]) {\n          var equality1 = diffs[pointer - 1][1],\n            edit = diffs[pointer][1],\n            equality2 = diffs[pointer + 1][1],\n            commonOffset = this.diff_commonSuffix(equality1, edit);\n          if (commonOffset) {\n            var commonString = edit.substring(edit.length - commonOffset);\n            equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n          }\n          for (var bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2); edit.charAt(0) === equality2.charAt(0);) {\n            equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n            var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n            score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n          }\n          diffs[pointer - 1][1] != bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n        }\n        pointer++;\n      }\n    }, diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/, diff_match_patch.whitespaceRegex_ = /\\s/, diff_match_patch.linebreakRegex_ = /[\\r\\n]/, diff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/, diff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/, diff_match_patch.prototype.diff_cleanupEfficiency = function (diffs) {\n      for (var changes = !1, equalities = [], equalitiesLength = 0, lastEquality = null, pointer = 0, pre_ins = !1, pre_del = !1, post_ins = !1, post_del = !1; pointer < diffs.length;) 0 == diffs[pointer][0] ? (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del) ? (equalities[equalitiesLength++] = pointer, pre_ins = post_ins, pre_del = post_del, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), post_ins = post_del = !1) : (-1 == diffs[pointer][0] ? post_del = !0 : post_ins = !0, lastEquality && (pre_ins && pre_del && post_ins && post_del || lastEquality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(-1, lastEquality)), diffs[equalities[equalitiesLength - 1] + 1][0] = 1, equalitiesLength--, lastEquality = null, pre_ins && pre_del ? (post_ins = post_del = !0, equalitiesLength = 0) : (pointer = --equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, post_ins = post_del = !1), changes = !0)), pointer++;\n      changes && this.diff_cleanupMerge(diffs);\n    }, diff_match_patch.prototype.diff_cleanupMerge = function (diffs) {\n      diffs.push(new diff_match_patch.Diff(0, \"\"));\n      for (var commonlength, pointer = 0, count_delete = 0, count_insert = 0, text_delete = \"\", text_insert = \"\"; pointer < diffs.length;) switch (diffs[pointer][0]) {\n        case 1:\n          count_insert++, text_insert += diffs[pointer][1], pointer++;\n          break;\n        case -1:\n          count_delete++, text_delete += diffs[pointer][1], pointer++;\n          break;\n        case 0:\n          count_delete + count_insert > 1 ? (0 !== count_delete && 0 !== count_insert && (0 !== (commonlength = this.diff_commonPrefix(text_insert, text_delete)) && (pointer - count_delete - count_insert > 0 && 0 == diffs[pointer - count_delete - count_insert - 1][0] ? diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength) : (diffs.splice(0, 0, new diff_match_patch.Diff(0, text_insert.substring(0, commonlength))), pointer++), text_insert = text_insert.substring(commonlength), text_delete = text_delete.substring(commonlength)), 0 !== (commonlength = this.diff_commonSuffix(text_insert, text_delete)) && (diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1], text_insert = text_insert.substring(0, text_insert.length - commonlength), text_delete = text_delete.substring(0, text_delete.length - commonlength))), pointer -= count_delete + count_insert, diffs.splice(pointer, count_delete + count_insert), text_delete.length && (diffs.splice(pointer, 0, new diff_match_patch.Diff(-1, text_delete)), pointer++), text_insert.length && (diffs.splice(pointer, 0, new diff_match_patch.Diff(1, text_insert)), pointer++), pointer++) : 0 !== pointer && 0 == diffs[pointer - 1][0] ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, count_insert = 0, count_delete = 0, text_delete = \"\", text_insert = \"\";\n      }\n      \"\" === diffs[diffs.length - 1][1] && diffs.pop();\n      var changes = !1;\n      for (pointer = 1; pointer < diffs.length - 1;) 0 == diffs[pointer - 1][0] && 0 == diffs[pointer + 1][0] && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), changes = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), changes = !0)), pointer++;\n      changes && this.diff_cleanupMerge(diffs);\n    }, diff_match_patch.prototype.diff_xIndex = function (diffs, loc) {\n      var x,\n        chars1 = 0,\n        chars2 = 0,\n        last_chars1 = 0,\n        last_chars2 = 0;\n      for (x = 0; x < diffs.length && (1 !== diffs[x][0] && (chars1 += diffs[x][1].length), -1 !== diffs[x][0] && (chars2 += diffs[x][1].length), !(chars1 > loc)); x++) last_chars1 = chars1, last_chars2 = chars2;\n      return diffs.length != x && -1 === diffs[x][0] ? last_chars2 : last_chars2 + (loc - last_chars1);\n    }, diff_match_patch.prototype.diff_prettyHtml = function (diffs) {\n      for (var html = [], pattern_amp = /&/g, pattern_lt = /</g, pattern_gt = />/g, pattern_para = /\\n/g, x = 0; x < diffs.length; x++) {\n        var op = diffs[x][0],\n          text = diffs[x][1].replace(pattern_amp, \"&amp;\").replace(pattern_lt, \"&lt;\").replace(pattern_gt, \"&gt;\").replace(pattern_para, \"&para;<br>\");\n        switch (op) {\n          case 1:\n            html[x] = '<ins style=\"background:#e6ffe6;\">' + text + \"</ins>\";\n            break;\n          case -1:\n            html[x] = '<del style=\"background:#ffe6e6;\">' + text + \"</del>\";\n            break;\n          case 0:\n            html[x] = \"<span>\" + text + \"</span>\";\n        }\n      }\n      return html.join(\"\");\n    }, diff_match_patch.prototype.diff_text1 = function (diffs) {\n      for (var text = [], x = 0; x < diffs.length; x++) 1 !== diffs[x][0] && (text[x] = diffs[x][1]);\n      return text.join(\"\");\n    }, diff_match_patch.prototype.diff_text2 = function (diffs) {\n      for (var text = [], x = 0; x < diffs.length; x++) -1 !== diffs[x][0] && (text[x] = diffs[x][1]);\n      return text.join(\"\");\n    }, diff_match_patch.prototype.diff_levenshtein = function (diffs) {\n      for (var levenshtein = 0, insertions = 0, deletions = 0, x = 0; x < diffs.length; x++) {\n        var op = diffs[x][0],\n          data = diffs[x][1];\n        switch (op) {\n          case 1:\n            insertions += data.length;\n            break;\n          case -1:\n            deletions += data.length;\n            break;\n          case 0:\n            levenshtein += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        }\n      }\n      return levenshtein += Math.max(insertions, deletions);\n    }, diff_match_patch.prototype.diff_toDelta = function (diffs) {\n      for (var text = [], x = 0; x < diffs.length; x++) switch (diffs[x][0]) {\n        case 1:\n          text[x] = \"+\" + encodeURI(diffs[x][1]);\n          break;\n        case -1:\n          text[x] = \"-\" + diffs[x][1].length;\n          break;\n        case 0:\n          text[x] = \"=\" + diffs[x][1].length;\n      }\n      return text.join(\"\\t\").replace(/%20/g, \" \");\n    }, diff_match_patch.prototype.diff_fromDelta = function (text1, delta) {\n      for (var diffs = [], diffsLength = 0, pointer = 0, tokens = delta.split(/\\t/g), x = 0; x < tokens.length; x++) {\n        var param = tokens[x].substring(1);\n        switch (tokens[x].charAt(0)) {\n          case \"+\":\n            try {\n              diffs[diffsLength++] = new diff_match_patch.Diff(1, decodeURI(param));\n            } catch (ex) {\n              throw new Error(\"Illegal escape in diff_fromDelta: \" + param);\n            }\n            break;\n          case \"-\":\n          case \"=\":\n            var n = parseInt(param, 10);\n            if (isNaN(n) || n < 0) throw new Error(\"Invalid number in diff_fromDelta: \" + param);\n            var text = text1.substring(pointer, pointer += n);\n            \"=\" == tokens[x].charAt(0) ? diffs[diffsLength++] = new diff_match_patch.Diff(0, text) : diffs[diffsLength++] = new diff_match_patch.Diff(-1, text);\n            break;\n          default:\n            if (tokens[x]) throw new Error(\"Invalid diff operation in diff_fromDelta: \" + tokens[x]);\n        }\n      }\n      if (pointer != text1.length) throw new Error(\"Delta length (\" + pointer + \") does not equal source text length (\" + text1.length + \").\");\n      return diffs;\n    }, diff_match_patch.prototype.match_main = function (text, pattern, loc) {\n      if (null == text || null == pattern || null == loc) throw new Error(\"Null input. (match_main)\");\n      return loc = Math.max(0, Math.min(loc, text.length)), text == pattern ? 0 : text.length ? text.substring(loc, loc + pattern.length) == pattern ? loc : this.match_bitap_(text, pattern, loc) : -1;\n    }, diff_match_patch.prototype.match_bitap_ = function (text, pattern, loc) {\n      if (pattern.length > this.Match_MaxBits) throw new Error(\"Pattern too long for this browser.\");\n      var s = this.match_alphabet_(pattern),\n        dmp = this;\n      function match_bitapScore_(e, x) {\n        var accuracy = e / pattern.length,\n          proximity = Math.abs(loc - x);\n        return dmp.Match_Distance ? accuracy + proximity / dmp.Match_Distance : proximity ? 1 : accuracy;\n      }\n      var score_threshold = this.Match_Threshold,\n        best_loc = text.indexOf(pattern, loc);\n      -1 != best_loc && (score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold), -1 != (best_loc = text.lastIndexOf(pattern, loc + pattern.length)) && (score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold)));\n      var bin_min,\n        bin_mid,\n        matchmask = 1 << pattern.length - 1;\n      best_loc = -1;\n      for (var last_rd, bin_max = pattern.length + text.length, d = 0; d < pattern.length; d++) {\n        for (bin_min = 0, bin_mid = bin_max; bin_min < bin_mid;) match_bitapScore_(d, loc + bin_mid) <= score_threshold ? bin_min = bin_mid : bin_max = bin_mid, bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n        bin_max = bin_mid;\n        var start = Math.max(1, loc - bin_mid + 1),\n          finish = Math.min(loc + bin_mid, text.length) + pattern.length,\n          rd = Array(finish + 2);\n        rd[finish + 1] = (1 << d) - 1;\n        for (var j = finish; j >= start; j--) {\n          var charMatch = s[text.charAt(j - 1)];\n          if (rd[j] = 0 === d ? (rd[j + 1] << 1 | 1) & charMatch : (rd[j + 1] << 1 | 1) & charMatch | (last_rd[j + 1] | last_rd[j]) << 1 | 1 | last_rd[j + 1], rd[j] & matchmask) {\n            var score = match_bitapScore_(d, j - 1);\n            if (score <= score_threshold) {\n              if (score_threshold = score, !((best_loc = j - 1) > loc)) break;\n              start = Math.max(1, 2 * loc - best_loc);\n            }\n          }\n        }\n        if (match_bitapScore_(d + 1, loc) > score_threshold) break;\n        last_rd = rd;\n      }\n      return best_loc;\n    }, diff_match_patch.prototype.match_alphabet_ = function (pattern) {\n      for (var s = {}, i = 0; i < pattern.length; i++) s[pattern.charAt(i)] = 0;\n      for (i = 0; i < pattern.length; i++) s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n      return s;\n    }, diff_match_patch.prototype.patch_addContext_ = function (patch, text) {\n      if (0 != text.length) {\n        if (null === patch.start2) throw Error(\"patch not initialized\");\n        for (var pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0; text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin;) padding += this.Patch_Margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n        padding += this.Patch_Margin;\n        var prefix = text.substring(patch.start2 - padding, patch.start2);\n        prefix && patch.diffs.unshift(new diff_match_patch.Diff(0, prefix));\n        var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);\n        suffix && patch.diffs.push(new diff_match_patch.Diff(0, suffix)), patch.start1 -= prefix.length, patch.start2 -= prefix.length, patch.length1 += prefix.length + suffix.length, patch.length2 += prefix.length + suffix.length;\n      }\n    }, diff_match_patch.prototype.patch_make = function (a, opt_b, opt_c) {\n      var text1, diffs;\n      if (\"string\" == typeof a && \"string\" == typeof opt_b && void 0 === opt_c) text1 = a, (diffs = this.diff_main(text1, opt_b, !0)).length > 2 && (this.diff_cleanupSemantic(diffs), this.diff_cleanupEfficiency(diffs));else if (a && \"object\" == typeof a && void 0 === opt_b && void 0 === opt_c) diffs = a, text1 = this.diff_text1(diffs);else if (\"string\" == typeof a && opt_b && \"object\" == typeof opt_b && void 0 === opt_c) text1 = a, diffs = opt_b;else {\n        if (\"string\" != typeof a || \"string\" != typeof opt_b || !opt_c || \"object\" != typeof opt_c) throw new Error(\"Unknown call format to patch_make.\");\n        text1 = a, diffs = opt_c;\n      }\n      if (0 === diffs.length) return [];\n      for (var patches = [], patch = new diff_match_patch.patch_obj(), patchDiffLength = 0, char_count1 = 0, char_count2 = 0, prepatch_text = text1, postpatch_text = text1, x = 0; x < diffs.length; x++) {\n        var diff_type = diffs[x][0],\n          diff_text = diffs[x][1];\n        switch (patchDiffLength || 0 === diff_type || (patch.start1 = char_count1, patch.start2 = char_count2), diff_type) {\n          case 1:\n            patch.diffs[patchDiffLength++] = diffs[x], patch.length2 += diff_text.length, postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);\n            break;\n          case -1:\n            patch.length1 += diff_text.length, patch.diffs[patchDiffLength++] = diffs[x], postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);\n            break;\n          case 0:\n            diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1 ? (patch.diffs[patchDiffLength++] = diffs[x], patch.length1 += diff_text.length, patch.length2 += diff_text.length) : diff_text.length >= 2 * this.Patch_Margin && patchDiffLength && (this.patch_addContext_(patch, prepatch_text), patches.push(patch), patch = new diff_match_patch.patch_obj(), patchDiffLength = 0, prepatch_text = postpatch_text, char_count1 = char_count2);\n        }\n        1 !== diff_type && (char_count1 += diff_text.length), -1 !== diff_type && (char_count2 += diff_text.length);\n      }\n      return patchDiffLength && (this.patch_addContext_(patch, prepatch_text), patches.push(patch)), patches;\n    }, diff_match_patch.prototype.patch_deepCopy = function (patches) {\n      for (var patchesCopy = [], x = 0; x < patches.length; x++) {\n        var patch = patches[x],\n          patchCopy = new diff_match_patch.patch_obj();\n        patchCopy.diffs = [];\n        for (var y = 0; y < patch.diffs.length; y++) patchCopy.diffs[y] = new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n        patchCopy.start1 = patch.start1, patchCopy.start2 = patch.start2, patchCopy.length1 = patch.length1, patchCopy.length2 = patch.length2, patchesCopy[x] = patchCopy;\n      }\n      return patchesCopy;\n    }, diff_match_patch.prototype.patch_apply = function (patches, text) {\n      if (0 == patches.length) return [text, []];\n      patches = this.patch_deepCopy(patches);\n      var nullPadding = this.patch_addPadding(patches);\n      text = nullPadding + text + nullPadding, this.patch_splitMax(patches);\n      for (var delta = 0, results = [], x = 0; x < patches.length; x++) {\n        var start_loc,\n          text2,\n          expected_loc = patches[x].start2 + delta,\n          text1 = this.diff_text1(patches[x].diffs),\n          end_loc = -1;\n        if (text1.length > this.Match_MaxBits ? -1 != (start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc)) && (-1 == (end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits)) || start_loc >= end_loc) && (start_loc = -1) : start_loc = this.match_main(text, text1, expected_loc), -1 == start_loc) results[x] = !1, delta -= patches[x].length2 - patches[x].length1;else if (results[x] = !0, delta = start_loc - expected_loc, text1 == (text2 = -1 == end_loc ? text.substring(start_loc, start_loc + text1.length) : text.substring(start_loc, end_loc + this.Match_MaxBits))) text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);else {\n          var diffs = this.diff_main(text1, text2, !1);\n          if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) results[x] = !1;else {\n            this.diff_cleanupSemanticLossless(diffs);\n            for (var index2, index1 = 0, y = 0; y < patches[x].diffs.length; y++) {\n              var mod = patches[x].diffs[y];\n              0 !== mod[0] && (index2 = this.diff_xIndex(diffs, index1)), 1 === mod[0] ? text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2) : -1 === mod[0] && (text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length))), -1 !== mod[0] && (index1 += mod[1].length);\n            }\n          }\n        }\n      }\n      return [text = text.substring(nullPadding.length, text.length - nullPadding.length), results];\n    }, diff_match_patch.prototype.patch_addPadding = function (patches) {\n      for (var paddingLength = this.Patch_Margin, nullPadding = \"\", x = 1; x <= paddingLength; x++) nullPadding += String.fromCharCode(x);\n      for (x = 0; x < patches.length; x++) patches[x].start1 += paddingLength, patches[x].start2 += paddingLength;\n      var patch = patches[0],\n        diffs = patch.diffs;\n      if (0 == diffs.length || 0 != diffs[0][0]) diffs.unshift(new diff_match_patch.Diff(0, nullPadding)), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength;else if (paddingLength > diffs[0][1].length) {\n        var extraLength = paddingLength - diffs[0][1].length;\n        diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength;\n      }\n      if (0 == (diffs = (patch = patches[patches.length - 1]).diffs).length || 0 != diffs[diffs.length - 1][0]) diffs.push(new diff_match_patch.Diff(0, nullPadding)), patch.length1 += paddingLength, patch.length2 += paddingLength;else if (paddingLength > diffs[diffs.length - 1][1].length) {\n        extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n        diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength;\n      }\n      return nullPadding;\n    }, diff_match_patch.prototype.patch_splitMax = function (patches) {\n      for (var patch_size = this.Match_MaxBits, x = 0; x < patches.length; x++) if (!(patches[x].length1 <= patch_size)) {\n        var bigpatch = patches[x];\n        patches.splice(x--, 1);\n        for (var start1 = bigpatch.start1, start2 = bigpatch.start2, precontext = \"\"; 0 !== bigpatch.diffs.length;) {\n          var patch = new diff_match_patch.patch_obj(),\n            empty = !0;\n          for (patch.start1 = start1 - precontext.length, patch.start2 = start2 - precontext.length, \"\" !== precontext && (patch.length1 = patch.length2 = precontext.length, patch.diffs.push(new diff_match_patch.Diff(0, precontext))); 0 !== bigpatch.diffs.length && patch.length1 < patch_size - this.Patch_Margin;) {\n            var diff_type = bigpatch.diffs[0][0],\n              diff_text = bigpatch.diffs[0][1];\n            1 === diff_type ? (patch.length2 += diff_text.length, start2 += diff_text.length, patch.diffs.push(bigpatch.diffs.shift()), empty = !1) : -1 === diff_type && 1 == patch.diffs.length && 0 == patch.diffs[0][0] && diff_text.length > 2 * patch_size ? (patch.length1 += diff_text.length, start1 += diff_text.length, empty = !1, patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text)), bigpatch.diffs.shift()) : (diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin), patch.length1 += diff_text.length, start1 += diff_text.length, 0 === diff_type ? (patch.length2 += diff_text.length, start2 += diff_text.length) : empty = !1, patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text)), diff_text == bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length));\n          }\n          precontext = (precontext = this.diff_text2(patch.diffs)).substring(precontext.length - this.Patch_Margin);\n          var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);\n          \"\" !== postcontext && (patch.length1 += postcontext.length, patch.length2 += postcontext.length, 0 !== patch.diffs.length && 0 === patch.diffs[patch.diffs.length - 1][0] ? patch.diffs[patch.diffs.length - 1][1] += postcontext : patch.diffs.push(new diff_match_patch.Diff(0, postcontext))), empty || patches.splice(++x, 0, patch);\n        }\n      }\n    }, diff_match_patch.prototype.patch_toText = function (patches) {\n      for (var text = [], x = 0; x < patches.length; x++) text[x] = patches[x];\n      return text.join(\"\");\n    }, diff_match_patch.prototype.patch_fromText = function (textline) {\n      var patches = [];\n      if (!textline) return patches;\n      for (var text = textline.split(\"\\n\"), textPointer = 0, patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/; textPointer < text.length;) {\n        var m = text[textPointer].match(patchHeader);\n        if (!m) throw new Error(\"Invalid patch string: \" + text[textPointer]);\n        var patch = new diff_match_patch.patch_obj();\n        for (patches.push(patch), patch.start1 = parseInt(m[1], 10), \"\" === m[2] ? (patch.start1--, patch.length1 = 1) : \"0\" == m[2] ? patch.length1 = 0 : (patch.start1--, patch.length1 = parseInt(m[2], 10)), patch.start2 = parseInt(m[3], 10), \"\" === m[4] ? (patch.start2--, patch.length2 = 1) : \"0\" == m[4] ? patch.length2 = 0 : (patch.start2--, patch.length2 = parseInt(m[4], 10)), textPointer++; textPointer < text.length;) {\n          var sign = text[textPointer].charAt(0);\n          try {\n            var line = decodeURI(text[textPointer].substring(1));\n          } catch (ex) {\n            throw new Error(\"Illegal escape in patch_fromText: \" + line);\n          }\n          if (\"-\" == sign) patch.diffs.push(new diff_match_patch.Diff(-1, line));else if (\"+\" == sign) patch.diffs.push(new diff_match_patch.Diff(1, line));else if (\" \" == sign) patch.diffs.push(new diff_match_patch.Diff(0, line));else {\n            if (\"@\" == sign) break;\n            if (\"\" !== sign) throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n          }\n          textPointer++;\n        }\n      }\n      return patches;\n    }, (diff_match_patch.patch_obj = function () {\n      this.diffs = [], this.start1 = null, this.start2 = null, this.length1 = 0, this.length2 = 0;\n    }).prototype.toString = function () {\n      for (var op, text = [\"@@ -\" + (0 === this.length1 ? this.start1 + \",0\" : 1 == this.length1 ? this.start1 + 1 : this.start1 + 1 + \",\" + this.length1) + \" +\" + (0 === this.length2 ? this.start2 + \",0\" : 1 == this.length2 ? this.start2 + 1 : this.start2 + 1 + \",\" + this.length2) + \" @@\\n\"], x = 0; x < this.diffs.length; x++) {\n        switch (this.diffs[x][0]) {\n          case 1:\n            op = \"+\";\n            break;\n          case -1:\n            op = \"-\";\n            break;\n          case 0:\n            op = \" \";\n        }\n        text[x + 1] = op + encodeURI(this.diffs[x][1]) + \"\\n\";\n      }\n      return text.join(\"\").replace(/%20/g, \" \");\n    }, module.exports = diff_match_patch, module.exports.diff_match_patch = diff_match_patch, module.exports.DIFF_DELETE = -1, module.exports.DIFF_INSERT = 1, module.exports.DIFF_EQUAL = 0;\n  }),\n  DIFF_EQUAL = diffMatchPatch.DIFF_EQUAL,\n  DIFF_DELETE = diffMatchPatch.DIFF_DELETE,\n  DIFF_INSERT = diffMatchPatch.DIFF_INSERT;\nfunction findChangeBlocks(changes) {\n  var start = findIndex_1(changes, function (change) {\n    return !isNormal(change);\n  });\n  if (-1 === start) return [];\n  var end = findIndex_1(changes, function (change) {\n    return !!isNormal(change);\n  }, start);\n  return -1 === end ? [changes.slice(start)] : [changes.slice(start, end)].concat(_toConsumableArray(findChangeBlocks(changes.slice(end))));\n}\nfunction splitDiffToLines(diffs) {\n  return diffs.reduce(function (lines, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      type = _ref4[0],\n      _currentLines$map2 = _toArray(_ref4[1].split(\"\\n\").map(function (line) {\n        return [type, line];\n      })),\n      currentLineRemaining = _currentLines$map2[0],\n      nextLines = _currentLines$map2.slice(1);\n    return [].concat(_toConsumableArray(lines.slice(0, -1)), [[].concat(_toConsumableArray(lines[lines.length - 1]), [currentLineRemaining])], _toConsumableArray(nextLines.map(function (line) {\n      return [line];\n    })));\n  }, [[]]);\n}\nfunction diffsToEdits(diffs, lineNumber) {\n  return diffs.reduce(function (output, diff) {\n    var _output = _slicedToArray(output, 2),\n      edits = _output[0],\n      start = _output[1],\n      _diff2 = _slicedToArray(diff, 2),\n      type = _diff2[0],\n      value = _diff2[1];\n    if (type !== DIFF_EQUAL) {\n      var edit = {\n        type: \"edit\",\n        lineNumber: lineNumber,\n        start: start,\n        length: value.length\n      };\n      edits.push(edit);\n    }\n    return [edits, start + value.length];\n  }, [[], 0])[0];\n}\nfunction convertToLinesOfEdits(linesOfDiffs, startLineNumber) {\n  return flatMap_1(linesOfDiffs, function (diffs, i) {\n    return diffsToEdits(diffs, startLineNumber + i);\n  });\n}\nfunction diffText(x, y) {\n  var dmp = new diffMatchPatch(),\n    diffs = dmp.diff_main(x, y);\n  return dmp.diff_cleanupSemantic(diffs), diffs.length <= 1 ? [[], []] : function (diffs) {\n    return diffs.reduce(function (_ref, diff) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        oldDiffs = _ref2[0],\n        newDiffs = _ref2[1];\n      switch (_slicedToArray(diff, 1)[0]) {\n        case DIFF_INSERT:\n          newDiffs.push(diff);\n          break;\n        case DIFF_DELETE:\n          oldDiffs.push(diff);\n          break;\n        default:\n          oldDiffs.push(diff), newDiffs.push(diff);\n      }\n      return [oldDiffs, newDiffs];\n    }, [[], []]);\n  }(diffs);\n}\nfunction diffChangeBlock(changes) {\n  var _changes$reduce = changes.reduce(function (_ref5, change) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        oldSource = _ref6[0],\n        newSource = _ref6[1];\n      return isDelete(change) ? [oldSource + (oldSource ? \"\\n\" : \"\") + change.content, newSource] : [oldSource, newSource + (newSource ? \"\\n\" : \"\") + change.content];\n    }, [\"\", \"\"]),\n    _changes$reduce2 = _slicedToArray(_changes$reduce, 2),\n    _diffText2 = _slicedToArray(diffText(_changes$reduce2[0], _changes$reduce2[1]), 2),\n    oldDiffs = _diffText2[0],\n    newDiffs = _diffText2[1];\n  if (0 === oldDiffs.length && 0 === newDiffs.length) return [[], []];\n  var getLineNumber = function (change) {\n      if (change && !isNormal(change)) return change.lineNumber;\n    },\n    oldStartLineNumber = getLineNumber(changes.find(isDelete)),\n    newStartLineNumber = getLineNumber(changes.find(isInsert));\n  if (void 0 === oldStartLineNumber || void 0 === newStartLineNumber) throw new Error(\"Could not find start line number for edit\");\n  return [convertToLinesOfEdits(splitDiffToLines(oldDiffs), oldStartLineNumber), convertToLinesOfEdits(splitDiffToLines(newDiffs), newStartLineNumber)];\n}\nfunction diffByLine(changes) {\n  var _changes$reduce3 = changes.reduce(function (_ref7, currentChange) {\n      var _ref8 = _slicedToArray(_ref7, 3),\n        oldEdits = _ref8[0],\n        newEdits = _ref8[1],\n        previousChange = _ref8[2];\n      if (!previousChange || !isDelete(previousChange) || !isInsert(currentChange)) return [oldEdits, newEdits, currentChange];\n      var _diffText4 = _slicedToArray(diffText(previousChange.content, currentChange.content), 2),\n        oldDiffs = _diffText4[0],\n        newDiffs = _diffText4[1];\n      return [oldEdits.concat(diffsToEdits(oldDiffs, previousChange.lineNumber)), newEdits.concat(diffsToEdits(newDiffs, currentChange.lineNumber)), currentChange];\n    }, [[], [], null]),\n    _changes$reduce4 = _slicedToArray(_changes$reduce3, 2);\n  return [_changes$reduce4[0], _changes$reduce4[1]];\n}\nfunction markEdits(hunks) {\n  var _ref9$type = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).type,\n    findEdits = \"block\" === (void 0 === _ref9$type ? \"block\" : _ref9$type) ? diffChangeBlock : diffByLine,\n    _changeBlocks$map$red = flatMap_1(hunks.map(function (hunk) {\n      return hunk.changes;\n    }), findChangeBlocks).map(findEdits).reduce(function (_ref10, _ref11) {\n      var _ref12 = _slicedToArray(_ref10, 2),\n        oldEdits = _ref12[0],\n        newEdits = _ref12[1],\n        _ref13 = _slicedToArray(_ref11, 2),\n        currentOld = _ref13[0],\n        currentNew = _ref13[1];\n      return [oldEdits.concat(currentOld), newEdits.concat(currentNew)];\n    }, [[], []]),\n    _changeBlocks$map$red2 = _slicedToArray(_changeBlocks$map$red, 2),\n    oldEdits = _changeBlocks$map$red2[0],\n    newEdits = _changeBlocks$map$red2[1];\n  return pickRanges(flatten_1(oldEdits), flatten_1(newEdits));\n}\nfunction markWord(word, name) {\n  var mark = function (word, name, replacement) {\n    return function (paths) {\n      return flatMap_1(paths, function (path) {\n        var leaf = leafOf(path);\n        return leaf.value.includes(word) ? leaf.value.split(word).reduce(function (output, text, i) {\n          return 0 !== i && output.push(replace(path, {\n            type: \"mark\",\n            markType: name,\n            value: replacement\n          })), text && output.push(replace(path, _objectSpread2(_objectSpread2({}, leaf), {}, {\n            value: text\n          }))), output;\n        }, []) : [path];\n      });\n    };\n  }(word, name, arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : word);\n  return function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      oldLinesOfPaths = _ref2[0],\n      newLinesOfPaths = _ref2[1];\n    return [oldLinesOfPaths.map(mark), newLinesOfPaths.map(mark)];\n  };\n}\nvar _excluded$2 = [\"enhancers\"],\n  tokenize = function (hunks) {\n    var pair,\n      _ref = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n      _ref$enhancers = _ref.enhancers,\n      enhancers = void 0 === _ref$enhancers ? [] : _ref$enhancers,\n      _toTokenTrees2 = _slicedToArray(toTokenTrees(hunks, _objectWithoutProperties(_ref, _excluded$2)), 2),\n      oldTokenTree = _toTokenTrees2[0],\n      newTokenTree = _toTokenTrees2[1],\n      _ref2 = [normalizeToLines(oldTokenTree), normalizeToLines(newTokenTree)],\n      _enhance = (pair = [_ref2[0], _ref2[1]], enhancers.reduce(function (input, enhance) {\n        return enhance(input);\n      }, pair)),\n      _enhance2 = _slicedToArray(_enhance, 2),\n      oldEnhanced = _enhance2[0],\n      newEnhanced = _enhance2[1],\n      _ref3 = [oldEnhanced.map(backToTree), newEnhanced.map(backToTree)],\n      newTrees = _ref3[1];\n    return {\n      old: _ref3[0].map(function (root) {\n        var _root$children;\n        return null !== (_root$children = root.children) && void 0 !== _root$children ? _root$children : [];\n      }),\n      new: newTrees.map(function (root) {\n        var _root$children2;\n        return null !== (_root$children2 = root.children) && void 0 !== _root$children2 ? _root$children2 : [];\n      })\n    };\n  };\nfunction useMinCollapsedLines(minLinesExclusive, hunks, oldSource) {\n  return useMemo(function () {\n    if (!oldSource) return hunks;\n    return expandCollapsedBlockBy(hunks, oldSource, function (lines) {\n      return lines < minLinesExclusive;\n    });\n  }, [minLinesExclusive, hunks, oldSource]);\n}\nfunction updateCollection(collection, command) {\n  switch (command.type) {\n    case \"push\":\n      return [].concat(_toConsumableArray(collection), [command.value]);\n    case \"clear\":\n      return collection.length ? [] : collection;\n    case \"toggle\":\n      return collection.includes(command.value) ? collection.filter(function (item) {\n        return item !== command.value;\n      }) : collection.concat(command.value);\n    case \"only\":\n      return [command.value];\n    default:\n      return collection;\n  }\n}\nfunction useCollection() {\n  var _useReducer2 = _slicedToArray(useReducer(updateCollection, []), 2),\n    collection = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  return {\n    collection: collection,\n    clear: function () {\n      dispatch({\n        type: \"clear\"\n      });\n    },\n    push: function (value) {\n      dispatch({\n        value: value,\n        type: \"push\"\n      });\n    },\n    toggle: function (value) {\n      dispatch({\n        value: value,\n        type: \"toggle\"\n      });\n    },\n    only: function (value) {\n      dispatch({\n        value: value,\n        type: \"only\"\n      });\n    }\n  };\n}\nfunction useChangeSelect(hunks) {\n  var _ref$multiple = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).multiple,\n    multiple = void 0 !== _ref$multiple && _ref$multiple,\n    _useCollection = useCollection(),\n    collection = _useCollection.collection,\n    clear = _useCollection.clear,\n    toggle = _useCollection.toggle,\n    only = _useCollection.only;\n  return useEffect(clear, [hunks]), [collection, function (_ref2) {\n    var change = _ref2.change;\n    if (change) {\n      var changeKey = getChangeKey(change);\n      multiple ? toggle(changeKey) : only(changeKey);\n    }\n  }];\n}\nfunction useSourceExpansion(hunks, oldSource) {\n  var _useCollection = useCollection(),\n    expandedRanges = _useCollection.collection,\n    clear = _useCollection.clear,\n    push = _useCollection.push;\n  useEffect(clear, [hunks, oldSource]);\n  var linesOfOldSource = useMemo(function () {\n    return Array.isArray(oldSource) ? oldSource : (oldSource || \"\").split(\"\\n\");\n  }, [oldSource]);\n  return [useMemo(function () {\n    return linesOfOldSource.length ? expandedRanges.reduce(function (hunks, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        start = _ref2[0],\n        end = _ref2[1];\n      return expandFromRawCode(hunks, linesOfOldSource, start, end);\n    }, hunks) : hunks;\n  }, [linesOfOldSource, hunks, expandedRanges]), function (start, end) {\n    return push([start, end]);\n  }];\n}\nfunction shallowEqualObjects(objA, objB) {\n  if (objA === objB) return !0;\n  if (!objA || !objB) return !1;\n  const aKeys = Object.keys(objA),\n    bKeys = Object.keys(objB),\n    len = aKeys.length;\n  if (bKeys.length !== len) return !1;\n  for (let i = 0; i < len; i++) {\n    const key = aKeys[i];\n    if (objA[key] !== objB[key] || !Object.prototype.hasOwnProperty.call(objB, key)) return !1;\n  }\n  return !0;\n}\nvar current,\n  _excluded$1 = [\"hunks\"],\n  _excluded2 = [\"hunks\"],\n  uid = (current = 0, function () {\n    return current += 1;\n  });\nfunction findAbnormalChanges(hunks) {\n  return flatMap_1(hunks, function (hunk) {\n    return hunk.changes.filter(function (change) {\n      return !isNormal(change);\n    });\n  });\n}\nfunction defaultShouldTokenize(current, prev) {\n  if (!prev) return !0;\n  var yHunks,\n    currentHunks = current.hunks,\n    currentPayload = _objectWithoutProperties(current, _excluded$1),\n    prevHunks = prev.hunks,\n    prevPayload = _objectWithoutProperties(prev, _excluded2);\n  return currentPayload.oldSource !== prevPayload.oldSource || (currentPayload.oldSource ? !shallowEqualObjects(currentPayload, prevPayload) || (yHunks = prevHunks, !function (arrA, arrB) {\n    if (arrA === arrB) return !0;\n    if (!arrA || !arrB) return !1;\n    const len = arrA.length;\n    if (arrB.length !== len) return !1;\n    for (let i = 0; i < len; i++) if (arrA[i] !== arrB[i]) return !1;\n    return !0;\n  }(findAbnormalChanges(currentHunks), findAbnormalChanges(yHunks))) : currentHunks !== prevHunks || !shallowEqualObjects(currentPayload, prevPayload));\n}\nfunction useTokenizeWorker(worker, payload) {\n  var value,\n    equals,\n    cache,\n    identifier,\n    _options$shouldTokeni = (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}).shouldTokenize,\n    shouldTokenize = void 0 === _options$shouldTokeni ? defaultShouldTokenize : _options$shouldTokeni,\n    payloadIdentifier = (value = payload, equals = function (current, previous) {\n      return !shouldTokenize(current, previous);\n    }, cache = useRef(void 0), identifier = useRef(0), equals(value, cache.current) || (cache.current = value, identifier.current = identifier.current + 1), identifier.current),\n    _useState2 = _slicedToArray(useState({\n      tokens: null,\n      tokenizationFailReason: null\n    }), 2),\n    tokenizeResult = _useState2[0],\n    setTokenizeResult = _useState2[1],\n    job = useRef(null);\n  return useEffect(function () {\n    var receiveTokens = function (_ref) {\n      var _ref$data = _ref.data,\n        payload = _ref$data.payload;\n      _ref$data.id === job.current && (payload.success ? setTokenizeResult({\n        tokens: payload.tokens,\n        tokenizationFailReason: null\n      }) : setTokenizeResult({\n        tokens: null,\n        tokenizationFailReason: payload.reason\n      }));\n    };\n    return worker.addEventListener(\"message\", receiveTokens), function () {\n      return worker.removeEventListener(\"message\", receiveTokens);\n    };\n  }, [worker]), useEffect(function () {\n    job.current = uid();\n    var data = {\n      payload: payload,\n      id: job.current,\n      type: \"tokenize\"\n    };\n    worker.postMessage(data);\n  }, [payloadIdentifier, worker, shouldTokenize]), tokenizeResult;\n}\nfunction wrapDisplayName(BaseComponent, hocName) {\n  return \"\".concat(hocName, \"(\").concat(\"string\" == typeof (Component = BaseComponent) || null == Component ? Component : Component.displayName || Component.name || \"Component\", \")\");\n  var Component;\n}\nfunction withSourceExpansion() {\n  return function (ComponentIn) {\n    function ComponentOut(props) {\n      var _useSourceExpansion2 = _slicedToArray(useSourceExpansion(props.hunks, props.oldSource), 2),\n        renderingHunks = _useSourceExpansion2[0],\n        expandRange = _useSourceExpansion2[1];\n      return jsx(ComponentIn, _objectSpread2(_objectSpread2({}, props), {}, {\n        hunks: renderingHunks,\n        onExpandRange: expandRange\n      }));\n    }\n    return ComponentOut.displayName = wrapDisplayName(ComponentIn, \"withSourceExpansion\"), ComponentOut;\n  };\n}\nfunction minCollapsedLines(minLinesExclusive) {\n  return function (ComponentIn) {\n    function ComponentOut(props) {\n      var renderingHunks = useMinCollapsedLines(minLinesExclusive, props.hunks, props.oldSource);\n      return jsx(ComponentIn, _objectSpread2(_objectSpread2({}, props), {}, {\n        hunks: renderingHunks\n      }));\n    }\n    return ComponentOut.displayName = wrapDisplayName(ComponentIn, \"minCollapsedLines\"), ComponentOut;\n  };\n}\nfunction withChangeSelect(options) {\n  return function (ComponentIn) {\n    function ComponentOut(props) {\n      var _useChangeSelect2 = _slicedToArray(useChangeSelect(props.hunks, options), 2),\n        selectedChanges = _useChangeSelect2[0],\n        toggleChangeSelection = _useChangeSelect2[1];\n      return jsx(ComponentIn, _objectSpread2(_objectSpread2({}, props), {}, {\n        selectedChanges: selectedChanges,\n        onToggleChangeSelection: toggleChangeSelection\n      }));\n    }\n    return ComponentOut.displayName = wrapDisplayName(ComponentIn, \"withChangeSelect\"), ComponentOut;\n  };\n}\nvar _excluded = [\"mapPayload\"];\nfunction defaultMapPayload(data) {\n  return data;\n}\nfunction withTokenizeWorkerwithTokenizeWorker(worker) {\n  var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n    _options$mapPayload = options.mapPayload,\n    mapPayload = void 0 === _options$mapPayload ? defaultMapPayload : _options$mapPayload,\n    hookOptions = _objectWithoutProperties(options, _excluded);\n  return function (ComponentIn) {\n    function ComponentOut(props) {\n      var payload = function (props) {\n          var hunks = props.hunks,\n            oldSource = props.oldSource,\n            language = props.language;\n          return mapPayload({\n            language: language,\n            oldSource: oldSource,\n            hunks: hunks\n          }, props);\n        }(props),\n        tokenizationResult = useTokenizeWorker(worker, payload, hookOptions);\n      return jsx(ComponentIn, _objectSpread2(_objectSpread2({}, props), tokenizationResult));\n    }\n    return ComponentOut.displayName = wrapDisplayName(ComponentIn, \"withTokenizeWorker\"), ComponentOut;\n  };\n}\nexport { Decoration, index as Diff, Hunk, computeNewLineNumber, computeOldLineNumber, expandCollapsedBlockBy, expandFromRawCode, findChangeByNewLineNumber, findChangeByOldLineNumber, getChangeKey, getCollapsedLinesCountBetween, getCorrespondingNewLineNumber, getCorrespondingOldLineNumber, insertHunk, isDelete, isInsert, isNormal, markEdits, markWord, minCollapsedLines, parseDiff, pickRanges, textLinesToHunk, tokenize, useChangeSelect, useMinCollapsedLines, useSourceExpansion, useTokenizeWorker, withChangeSelect, withSourceExpansion, withTokenizeWorkerwithTokenizeWorker as withTokenizeWorker };\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}