{"ast":null,"code":"var _jsxFileName = \"D:\\\\langchain\\\\my-app\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { mapValues } from 'lodash';\nimport { Input } from 'antd';\nimport { diffLines, formatLines } from 'unidiff';\nimport { parseDiff, Diff, Hunk, getChangeKey } from 'react-diff-view';\nimport { useConversations, Conversation } from './comments';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_HUNKS = [];\nfunction App() {\n  _s();\n  const [oldCode, setOldCode] = useState('');\n  const [newCode, setNewCode] = useState('');\n  const [{\n    type,\n    hunks\n  }, setDiff] = useState({\n    type: '',\n    hunks: EMPTY_HUNKS\n  });\n  const fetchCodeFromAPI = useCallback(async () => {\n    try {\n      const response = await fetch(\"http://localhost:3001/api/codes\");\n      if (!response.ok) {\n        console.log('Failed to fetch code from API');\n        throw new Error('Failed to fetch code from API');\n      }\n      const {\n        oldCode,\n        newCode\n      } = await response.json();\n      setOldCode(oldCode);\n      setNewCode(newCode);\n    } catch (error) {\n      console.error('Error fetching code:', error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchCodeFromAPI();\n  }, [fetchCodeFromAPI]);\n  const generateDiff = useCallback(() => {\n    if (oldCode && newCode) {\n      const diffText = formatLines(diffLines(oldCode, newCode), {\n        context: 3\n      });\n      const [diff] = parseDiff(diffText, {\n        nearbySequences: 'zip'\n      });\n      setDiff({\n        type: 'split',\n        hunks: diff.hunks || EMPTY_HUNKS\n      });\n    }\n  }, [oldCode, newCode]);\n  useEffect(() => {\n    generateDiff();\n  }, [oldCode, newCode, generateDiff]);\n  const [conversations, {\n    initConversation,\n    addComment\n  }] = useConversations();\n  const codeEvents = {\n    onDoubleClick({\n      change\n    }) {\n      const key = getChangeKey(change);\n      if (!conversations[key]) {\n        initConversation(key);\n      }\n    }\n  };\n  const widgets = mapValues(conversations, ({\n    comments\n  }, changeKey) => /*#__PURE__*/_jsxDEV(Conversation, {\n    changeKey: changeKey,\n    comments: comments,\n    onSubmitComment: addComment\n  }, changeKey, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this));\n  const serializeContentToHTML = useCallback(() => {\n    const contentElement = document.getElementById('diff-view');\n    if (!contentElement) {\n      return;\n    }\n    const htmlContent = contentElement.innerHTML;\n\n    // Inline styles from CSS files\n    const styles = `\n            body { font-family: Arial, sans-serif; }\n            .diff { display: flex; }\n            .hunk { margin: 10px 0; }\n            .insert { background-color: lightgreen; }\n            .delete { background-color: lightcoral; }\n            /* Include any additional styles from your CSS files */\n        `;\n    const fullHtml = `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <title>Generated Content</title>\n                <style>\n                    ${styles}\n                </style>\n                <link rel=\"stylesheet\" href=\"https://unpkg.com/react-diff-view/style/index.css\">\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/4.16.13/antd.min.css\">\n            </head>\n            <body>\n                ${htmlContent}\n            </body>\n            </html>\n        `;\n    fetch('http://localhost:3001/save-html', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        html: fullHtml\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to save HTML content');\n      }\n      console.log('HTML content saved successfully');\n      // Handle success or further actions if needed\n    }).catch(error => {\n      console.error('Error saving HTML:', error);\n      // Handle error scenarios\n    });\n  }, []);\n  useEffect(() => {\n    if (oldCode && newCode && hunks.length > 0) {\n      serializeContentToHTML();\n    }\n  }, [oldCode, newCode, hunks, serializeContentToHTML]);\n  return null;\n}\n_s(App, \"ZcaQskQxybk4jetF520aGa5kkM8=\", false, function () {\n  return [useConversations];\n});\n_c = App;\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 134,\n  columnNumber: 17\n}, this), rootElement);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ReactDOM","mapValues","Input","diffLines","formatLines","parseDiff","Diff","Hunk","getChangeKey","useConversations","Conversation","jsxDEV","_jsxDEV","EMPTY_HUNKS","App","_s","oldCode","setOldCode","newCode","setNewCode","type","hunks","setDiff","fetchCodeFromAPI","response","fetch","ok","console","log","Error","json","error","generateDiff","diffText","context","diff","nearbySequences","conversations","initConversation","addComment","codeEvents","onDoubleClick","change","key","widgets","comments","changeKey","onSubmitComment","fileName","_jsxFileName","lineNumber","columnNumber","serializeContentToHTML","contentElement","document","getElementById","htmlContent","innerHTML","styles","fullHtml","method","headers","body","JSON","stringify","html","then","catch","length","_c","rootElement","render","$RefreshReg$"],"sources":["D:/langchain/my-app/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { mapValues } from 'lodash';\nimport { Input } from 'antd';\nimport { diffLines, formatLines } from 'unidiff';\nimport { parseDiff, Diff, Hunk, getChangeKey } from 'react-diff-view';\nimport { useConversations, Conversation } from './comments';\n\n\nimport 'react-diff-view/style/index.css';\nimport './style.css';\n\nconst EMPTY_HUNKS = [];\n\nfunction App() {\n    const [oldCode, setOldCode] = useState('');\n    const [newCode, setNewCode] = useState('');\n    const [{ type, hunks }, setDiff] = useState({ type: '', hunks: EMPTY_HUNKS });\n\n    const fetchCodeFromAPI = useCallback(async () => {\n        try {\n             \n            const response = await fetch(\"http://localhost:3001/api/codes\");\n\n            if (!response.ok) {\n                console.log('Failed to fetch code from API');\n                throw new Error('Failed to fetch code from API');\n            }\n\n            const {oldCode,newCode} = await response.json();\n            setOldCode(oldCode);\n            setNewCode(newCode);\n        } catch (error) {\n            console.error('Error fetching code:', error);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchCodeFromAPI();\n    }, [fetchCodeFromAPI]);\n\n    const generateDiff = useCallback(() => {\n        if (oldCode && newCode) {\n            const diffText = formatLines(diffLines(oldCode, newCode), { context: 3 });\n            const [diff] = parseDiff(diffText, { nearbySequences: 'zip' });\n            setDiff({ type: 'split', hunks: diff.hunks || EMPTY_HUNKS });\n        }\n    }, [oldCode, newCode]);\n\n    useEffect(() => {\n        generateDiff();\n    }, [oldCode, newCode, generateDiff]);\n\n    const [conversations, { initConversation, addComment }] = useConversations();\n    const codeEvents = {\n        onDoubleClick({ change }) {\n            const key = getChangeKey(change);\n            if (!conversations[key]) {\n                initConversation(key);\n            }\n        },\n    };\n\n    const widgets = mapValues(conversations, ({ comments }, changeKey) => (\n        <Conversation key={changeKey} changeKey={changeKey} comments={comments} onSubmitComment={addComment} />\n    ));\n\n    const serializeContentToHTML = useCallback(() => {\n        const contentElement = document.getElementById('diff-view');\n        if (!contentElement) {\n            return;\n        }\n        const htmlContent = contentElement.innerHTML;\n\n        // Inline styles from CSS files\n        const styles = `\n            body { font-family: Arial, sans-serif; }\n            .diff { display: flex; }\n            .hunk { margin: 10px 0; }\n            .insert { background-color: lightgreen; }\n            .delete { background-color: lightcoral; }\n            /* Include any additional styles from your CSS files */\n        `;\n        const fullHtml = `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <title>Generated Content</title>\n                <style>\n                    ${styles}\n                </style>\n                <link rel=\"stylesheet\" href=\"https://unpkg.com/react-diff-view/style/index.css\">\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/4.16.13/antd.min.css\">\n            </head>\n            <body>\n                ${htmlContent}\n            </body>\n            </html>\n        `;\n\n        fetch('http://localhost:3001/save-html', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ html: fullHtml }),\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to save HTML content');\n            }\n            console.log('HTML content saved successfully');\n            // Handle success or further actions if needed\n        })\n        .catch(error => {\n            console.error('Error saving HTML:', error);\n            // Handle error scenarios\n        });\n    }, []);\n\n    useEffect(() => {\n        if (oldCode && newCode && hunks.length > 0) {\n            serializeContentToHTML();\n        }\n    }, [oldCode, newCode, hunks, serializeContentToHTML]);\n\n    return (\n        null\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}