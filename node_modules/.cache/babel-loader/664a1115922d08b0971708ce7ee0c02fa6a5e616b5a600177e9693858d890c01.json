{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\n\n// Example old and new code snippets\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst oldCode = `\nfunction MyComponent() {\n  return <div>Hello, old world!</div>;\n}\n`;\nconst newCode = `\nfunction MyComponent() {\n  return <div>Hello, new world!</div>;\n}\n`;\n\n// Function to generate Unified Diff format text\nconst generateDiffText = (oldCode, newCode) => {\n  const old = oldCode.trim().split('\\n');\n  const notold = newCode.trim().split('\\n');\n  let diffText = '---oldCode\\n+++ newCode \\n';\n  for (let i = 0; i < old.length || i < notold.length; i++) {\n    if (i < old.length && i < notold.length && old[i] === notold[i]) {\n      diffText += `  ${old[i]}\\n`;\n    } else if (i < old.length) {\n      diffText += `- ${old[i]}\\n`;\n    } else if (i < notold.length) {\n      diffText += `- ${old[i]}\\n`;\n    }\n  }\n  return diffText;\n};\nconst DiffViewer = () => {\n  const diffText = generateDiffText(oldCode, newCode);\n  const [diff, error] = parseDiff(diffText);\n  if (error) {\n    console.error('Error parsing diff:', error);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error parsing diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n  if (!diff || !diff.hunks) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Failed to parse diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Diff, {\n    viewType: \"split\",\n    diff: diff,\n    children: hunks => (diff.hunks || []).map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n      hunk: hunk\n    }, hunk.content, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = DiffViewer;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Difference Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiffViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DiffViewer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Diff","Hunk","parseDiff","jsxDEV","_jsxDEV","oldCode","newCode","generateDiffText","old","trim","split","notold","diffText","i","length","DiffViewer","diff","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","hunks","viewType","map","hunk","content","_c","App","className","_c2","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/App.js"],"sourcesContent":["import React from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\n\n// Example old and new code snippets\nconst oldCode = `\nfunction MyComponent() {\n  return <div>Hello, old world!</div>;\n}\n`;\n\nconst newCode = `\nfunction MyComponent() {\n  return <div>Hello, new world!</div>;\n}\n`;\n\n// Function to generate Unified Diff format text\nconst generateDiffText = (oldCode, newCode) => {\n  const old = oldCode.trim().split('\\n');\n  const notold = newCode.trim().split('\\n');\n  let diffText = '---oldCode\\n+++ newCode \\n';\n  for(let i=0;i<old.length || i<notold.length; i++)\n    {\n      if(i<old.length && i<notold.length && old[i]===notold[i])\n        {\n          diffText += `  ${old[i]}\\n`;\n        }\n      else if(i<old.length)\n        {\n          diffText += `- ${old[i]}\\n`;\n        }  \n      else if(i<notold.length)\n        {\n          diffText += `- ${old[i]}\\n`;\n        }\n    }\n  return diffText;\n\n};\n\nconst DiffViewer = () => {\n  const diffText = generateDiffText(oldCode, newCode);\n  const [diff, error] = parseDiff(diffText);\n\n  if (error) {\n    console.error('Error parsing diff:', error);\n    return <div>Error parsing diff</div>;\n  }\n\n  if (!diff || !diff.hunks) {\n    return <div>Failed to parse diff</div>;\n  }\n\n  return (\n    <Diff viewType=\"split\" diff={diff}>\n      {hunks => (diff.hunks || []).map(hunk => (\n        <Hunk key={hunk.content} hunk={hunk} />\n      ))}\n    </Diff>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Code Difference Viewer</h1>\n      <DiffViewer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}