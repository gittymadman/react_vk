{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\codeiff.js\";\nimport React from 'react';\n\n// Mock OldCode and NewCode for demonstration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OldCode = `\nfunction hello() {\n  console.log(\"Hello, world!\");\n}\n`;\nconst NewCode = `\nfunction hello() {\n  console.log(\"Hello, world!\");\n  console.log(\"Goodbye, world!\");\n}\n`;\n\n// Mock DiffWithSourceExpansion component\nconst DiffWithSourceExpansion = ({\n  viewType,\n  oldSource,\n  newSource,\n  compareMethod,\n  renderHunk\n}) => {\n  const hunks = diff(oldSource, newSource, compareMethod);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `diff-view ${viewType}`,\n    children: hunks.map((hunk, index) => renderHunk(hunk, index))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n// Simplified diff function to create mock hunks\n_c = DiffWithSourceExpansion;\nconst diff = (oldSource, newSource, compareMethod) => {\n  // This is a simplified example; you should use a proper diff library.\n  const oldLines = oldSource.split('\\n');\n  const newLines = newSource.split('\\n');\n  const hunks = [];\n  let i = 0;\n  let j = 0;\n  while (i < oldLines.length || j < newLines.length) {\n    const oldLine = oldLines[i] || '';\n    const newLine = newLines[j] || '';\n    const line = {\n      oldLineNumber: i + 1,\n      newLineNumber: j + 1,\n      type: compareMethod(oldLine, newLine) ? 'unchanged' : oldLine ? newLine ? 'changed' : 'removed' : 'added',\n      content: compareMethod(oldLine, newLine) ? oldLine : newLine\n    };\n    hunks.push(line);\n    i++;\n    j++;\n  }\n  return [{\n    lines: hunks\n  }];\n};\n\n// Mock Hunk component\nconst Hunk = ({\n  hunk,\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hunk\",\n    children: children(hunk)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n};\n\n// Mock Decoration component\n_c2 = Hunk;\nconst Decoration = ({\n  type,\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `line ${type}`,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n// The CodeDiff component\n_c3 = Decoration;\nconst CodeDiff = () => {\n  return /*#__PURE__*/_jsxDEV(DiffWithSourceExpansion, {\n    viewType: \"split\",\n    oldSource: OldCode,\n    newSource: NewCode,\n    compareMethod: (lineFromFile1, lineFromFile2) => lineFromFile1 === lineFromFile2,\n    renderHunk: (hunk, index) => /*#__PURE__*/_jsxDEV(Hunk, {\n      hunk: hunk,\n      children: ({\n        lines\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: lines.map((line, i) => {\n          const {\n            newLineNumber,\n            oldLineNumber,\n            type,\n            content\n          } = line;\n          return /*#__PURE__*/_jsxDEV(Decoration, {\n            type: type,\n            children: content\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_c4 = CodeDiff;\nexport default CodeDiff;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"DiffWithSourceExpansion\");\n$RefreshReg$(_c2, \"Hunk\");\n$RefreshReg$(_c3, \"Decoration\");\n$RefreshReg$(_c4, \"CodeDiff\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","OldCode","NewCode","DiffWithSourceExpansion","viewType","oldSource","newSource","compareMethod","renderHunk","hunks","diff","className","children","map","hunk","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","oldLines","split","newLines","i","j","length","oldLine","newLine","line","oldLineNumber","newLineNumber","type","content","push","lines","Hunk","_c2","Decoration","_c3","CodeDiff","lineFromFile1","lineFromFile2","_c4","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/codeiff.js"],"sourcesContent":["import React from 'react';\r\n\r\n// Mock OldCode and NewCode for demonstration\r\nconst OldCode = `\r\nfunction hello() {\r\n  console.log(\"Hello, world!\");\r\n}\r\n`;\r\n\r\nconst NewCode = `\r\nfunction hello() {\r\n  console.log(\"Hello, world!\");\r\n  console.log(\"Goodbye, world!\");\r\n}\r\n`;\r\n\r\n// Mock DiffWithSourceExpansion component\r\nconst DiffWithSourceExpansion = ({ viewType, oldSource, newSource, compareMethod, renderHunk }) => {\r\n  const hunks = diff(oldSource, newSource, compareMethod);\r\n  return (\r\n    <div className={`diff-view ${viewType}`}>\r\n      {hunks.map((hunk, index) => renderHunk(hunk, index))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Simplified diff function to create mock hunks\r\nconst diff = (oldSource, newSource, compareMethod) => {\r\n  // This is a simplified example; you should use a proper diff library.\r\n  const oldLines = oldSource.split('\\n');\r\n  const newLines = newSource.split('\\n');\r\n  const hunks = [];\r\n\r\n  let i = 0;\r\n  let j = 0;\r\n\r\n  while (i < oldLines.length || j < newLines.length) {\r\n    const oldLine = oldLines[i] || '';\r\n    const newLine = newLines[j] || '';\r\n    const line = {\r\n      oldLineNumber: i + 1,\r\n      newLineNumber: j + 1,\r\n      type: compareMethod(oldLine, newLine) ? 'unchanged' : (oldLine ? (newLine ? 'changed' : 'removed') : 'added'),\r\n      content: compareMethod(oldLine, newLine) ? oldLine : newLine,\r\n    };\r\n\r\n    hunks.push(line);\r\n    i++;\r\n    j++;\r\n  }\r\n\r\n  return [ { lines: hunks } ];\r\n};\r\n\r\n// Mock Hunk component\r\nconst Hunk = ({ hunk, children }) => {\r\n  return <div className=\"hunk\">{children(hunk)}</div>;\r\n};\r\n\r\n// Mock Decoration component\r\nconst Decoration = ({ type, children }) => {\r\n  return <div className={`line ${type}`}>{children}</div>;\r\n};\r\n\r\n// The CodeDiff component\r\nconst CodeDiff = () => {\r\n  return (\r\n    <DiffWithSourceExpansion\r\n      viewType=\"split\"\r\n      oldSource={OldCode}\r\n      newSource={NewCode}\r\n      compareMethod={(lineFromFile1, lineFromFile2) => lineFromFile1 === lineFromFile2}\r\n      renderHunk={(hunk, index) => (\r\n        <Hunk key={index} hunk={hunk}>\r\n          {({ lines }) => (\r\n            <div>\r\n              {lines.map((line, i) => {\r\n                const { newLineNumber, oldLineNumber, type, content } = line;\r\n                return (\r\n                  <Decoration key={i} type={type}>\r\n                    {content}\r\n                  </Decoration>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </Hunk>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CodeDiff;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}