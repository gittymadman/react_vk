{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diffText = `\n--- oldCode\n+++ newCode\n@@ -1,5 +1,5 @@\n function MyComponent() {\n-  return <div>Hello, old world!</div>;\n+  return <div>Hello, new world!</div>;\n }\n`;\nconst DiffViewer = () => {\n  // Parsing the diff text into a structured diff object\n  const [diff] = parseDiff(diffText);\n\n  // If parsing fails or if there are no hunks, render a failure message\n  if (!diff || !diff.hunks) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Failed to parse diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If parsing is successful, render the Diff component\n  return /*#__PURE__*/_jsxDEV(Diff, {\n    viewType: \"split\",\n    diff: diff,\n    children: diff.hunks = (diff.hunks || []).map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n      hunk: hunk\n    }, hunk.content, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_c = DiffViewer;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" COde Diff Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiffViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DiffViewer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Diff","Hunk","parseDiff","jsxDEV","_jsxDEV","diffText","DiffViewer","diff","hunks","children","fileName","_jsxFileName","lineNumber","columnNumber","viewType","map","hunk","content","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/App.js"],"sourcesContent":["import React from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\n\n\n\nconst diffText = `\n--- oldCode\n+++ newCode\n@@ -1,5 +1,5 @@\n function MyComponent() {\n-  return <div>Hello, old world!</div>;\n+  return <div>Hello, new world!</div>;\n }\n`;\n\nconst DiffViewer = () => {\n  // Parsing the diff text into a structured diff object\n  const [diff] = parseDiff(diffText);\n\n  // If parsing fails or if there are no hunks, render a failure message\n  if (!diff || !diff.hunks) {\n    return <div>Failed to parse diff</div>;\n  }\n\n  // If parsing is successful, render the Diff component\n  return (\n    <Diff viewType=\"split\" diff={diff}>\n      {/* Rendering each hunk within the Diff component */}\n      {diff.hunks = (diff.hunks || []).map(hunk => (\n        <Hunk key={hunk.content} hunk={hunk} />\n      ))}\n    </Diff>\n  );\n};\n\n\nconst App = () => {\n  return(\n    <div>\n      <h1> COde Diff Viewer</h1>\n      <DiffViewer />  \n    </div>\n  );\n};\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,OAAO,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIzC,MAAMC,QAAQ,GAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB;EACA,MAAM,CAACC,IAAI,CAAC,GAAGL,SAAS,CAACG,QAAQ,CAAC;;EAElC;EACA,IAAI,CAACE,IAAI,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;IACxB,oBAAOJ,OAAA;MAAAK,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;;EAEA;EACA,oBACET,OAAA,CAACJ,IAAI;IAACc,QAAQ,EAAC,OAAO;IAACP,IAAI,EAAEA,IAAK;IAAAE,QAAA,EAE/BF,IAAI,CAACC,KAAK,GAAG,CAACD,IAAI,CAACC,KAAK,IAAI,EAAE,EAAEO,GAAG,CAACC,IAAI,iBACvCZ,OAAA,CAACH,IAAI;MAAoBe,IAAI,EAAEA;IAAK,GAAzBA,IAAI,CAACC,OAAO;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACK,EAAA,GAlBIZ,UAAU;AAqBhB,MAAMa,GAAG,GAAGA,CAAA,KAAM;EAChB,oBACEf,OAAA;IAAAK,QAAA,gBACEL,OAAA;MAAAK,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BT,OAAA,CAACE,UAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACO,GAAA,GAPID,GAAG;AAQT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}