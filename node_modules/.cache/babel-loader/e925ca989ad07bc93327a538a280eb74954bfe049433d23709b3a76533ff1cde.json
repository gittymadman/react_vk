{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { mapValues } from 'lodash';\nimport { Input } from 'antd';\nimport { diffLines, formatLines } from 'unidiff';\nimport { parseDiff, Diff, Hunk, getChangeKey } from 'react-diff-view';\nimport { useInput } from './hooks';\nimport { useConversations, Conversation } from './comments';\nimport 'antd/dist/reset.css';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_HUNKS = [];\nfunction App() {\n  _s();\n  const oldText = useInput('');\n  const newText = useInput('');\n  const [{\n    type,\n    hunks\n  }, setDiff] = useState({\n    type: '',\n    hunks: EMPTY_HUNKS\n  });\n  const generateDiff = useCallback(() => {\n    if (oldText.value && newText.value) {\n      const diffText = formatLines(diffLines(oldText.value, newText.value), {\n        context: 3\n      });\n      const [diff] = parseDiff(diffText, {\n        nearbySequences: 'zip'\n      });\n      setDiff({\n        type: 'split',\n        hunks: diff.hunks || EMPTY_HUNKS\n      });\n    }\n  }, [oldText.value, newText.value]);\n  useEffect(() => {\n    generateDiff();\n  }, [oldText.value, newText.value, generateDiff]);\n  const [conversations, {\n    initConversation,\n    addComment\n  }] = useConversations();\n  const codeEvents = {\n    onDoubleClick({\n      change\n    }) {\n      const key = getChangeKey(change);\n      if (!conversations[key]) {\n        initConversation(key);\n      }\n    }\n  };\n  const widgets = mapValues(conversations, ({\n    comments\n  }, changeKey) => /*#__PURE__*/_jsxDEV(Conversation, {\n    changeKey: changeKey,\n    comments: comments,\n    onSubmitComment: addComment\n  }, changeKey, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this));\n  const serializeContentToHTML = useCallback(() => {\n    const contentElement = document.getElementById('diff-view');\n    if (!contentElement) {\n      return;\n    }\n    const htmlContent = contentElement.innerHTML;\n\n    // Inline styles from CSS files\n    const styles = `\n            body { font-family: Arial, sans-serif; }\n            .diff { display: flex; }\n            .hunk { margin: 10px 0; }\n            .insert { background-color: lightgreen; }\n            .delete { background-color: lightcoral; }\n            /* Include any additional styles from your CSS files */\n        `;\n    const fullHtml = `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <title>Generated Content</title>\n                <style>\n                    ${styles}\n                </style>\n            </head>\n            <body>\n                ${htmlContent}\n            </body>\n            </html>\n        `;\n    fetch('http://localhost:3000/save-html', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        html: fullHtml\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to save HTML content');\n      }\n      console.log('HTML content saved successfully');\n      // Handle success or further actions if needed\n    }).catch(error => {\n      console.error('Error saving HTML:', error);\n      // Handle error scenarios\n    });\n  }, []);\n  useEffect(() => {\n    if (oldText.value && newText.value && hunks.length > 0) {\n      serializeContentToHTML();\n    }\n  }, [oldText.value, newText.value, hunks, serializeContentToHTML]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n          className: \"text\",\n          rows: 5,\n          placeholder: \"OLD CODE...\",\n          ...oldText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          className: \"text\",\n          rows: 5,\n          placeholder: \"NEW CODE...\",\n          ...newText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"diff-view\",\n      children: /*#__PURE__*/_jsxDEV(Diff, {\n        viewType: \"split\",\n        diffType: type,\n        hunks: hunks || EMPTY_HUNKS,\n        children: hunks => hunks.map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n          hunk: hunk,\n          codeEvents: codeEvents,\n          widgets: widgets\n        }, hunk.content, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"ITy1TX8t7g+xKYtnrQCnmkZoIsw=\", false, function () {\n  return [useInput, useInput, useConversations];\n});\n_c = App;\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 127,\n  columnNumber: 17\n}, this), rootElement);\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ReactDOM","mapValues","Input","diffLines","formatLines","parseDiff","Diff","Hunk","getChangeKey","useInput","useConversations","Conversation","jsxDEV","_jsxDEV","EMPTY_HUNKS","App","_s","oldText","newText","type","hunks","setDiff","generateDiff","value","diffText","context","diff","nearbySequences","conversations","initConversation","addComment","codeEvents","onDoubleClick","change","key","widgets","comments","changeKey","onSubmitComment","fileName","_jsxFileName","lineNumber","columnNumber","serializeContentToHTML","contentElement","document","getElementById","htmlContent","innerHTML","styles","fullHtml","fetch","method","headers","body","JSON","stringify","html","then","response","ok","Error","console","log","catch","error","length","children","className","TextArea","rows","placeholder","id","viewType","diffType","map","hunk","content","_c","rootElement","render","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/index.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport { mapValues } from 'lodash';\nimport { Input } from 'antd';\nimport { diffLines, formatLines } from 'unidiff';\nimport { parseDiff, Diff, Hunk, getChangeKey } from 'react-diff-view';\nimport { useInput } from './hooks';\nimport { useConversations, Conversation } from './comments';\n\nimport 'antd/dist/reset.css';\nimport 'react-diff-view/style/index.css';\nimport './style.css';\n\nconst EMPTY_HUNKS = [];\n\nfunction App() {\n    const oldText = useInput('');\n    const newText = useInput('');\n    const [{ type, hunks }, setDiff] = useState({ type: '', hunks: EMPTY_HUNKS });\n\n    const generateDiff = useCallback(() => {\n        if (oldText.value && newText.value) {\n            const diffText = formatLines(diffLines(oldText.value, newText.value), { context: 3 });\n            const [diff] = parseDiff(diffText, { nearbySequences: 'zip' });\n            setDiff({ type: 'split', hunks: diff.hunks || EMPTY_HUNKS });\n        }\n    }, [oldText.value, newText.value]);\n\n    useEffect(() => {\n        generateDiff();\n    }, [oldText.value, newText.value, generateDiff]);\n\n    const [conversations, { initConversation, addComment }] = useConversations();\n    const codeEvents = {\n        onDoubleClick({ change }) {\n            const key = getChangeKey(change);\n            if (!conversations[key]) {\n                initConversation(key);\n            }\n        },\n    };\n\n    const widgets = mapValues(conversations, ({ comments }, changeKey) => (\n        <Conversation key={changeKey} changeKey={changeKey} comments={comments} onSubmitComment={addComment} />\n    ));\n\n    const serializeContentToHTML = useCallback(() => {\n        const contentElement = document.getElementById('diff-view');\n        if (!contentElement) {\n            return;\n        }\n        const htmlContent = contentElement.innerHTML;\n\n        // Inline styles from CSS files\n        const styles = `\n            body { font-family: Arial, sans-serif; }\n            .diff { display: flex; }\n            .hunk { margin: 10px 0; }\n            .insert { background-color: lightgreen; }\n            .delete { background-color: lightcoral; }\n            /* Include any additional styles from your CSS files */\n        `;\n        const fullHtml = `\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <title>Generated Content</title>\n                <style>\n                    ${styles}\n                </style>\n            </head>\n            <body>\n                ${htmlContent}\n            </body>\n            </html>\n        `;\n\n        fetch('http://localhost:3000/save-html', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ html: fullHtml }),\n      })\n      .then(response => {\n          if (!response.ok) {\n              throw new Error('Failed to save HTML content');\n          }\n          console.log('HTML content saved successfully');\n          // Handle success or further actions if needed\n      })\n      .catch(error => {\n          console.error('Error saving HTML:', error);\n          // Handle error scenarios\n      });\n  }, []);\n\n    useEffect(() => {\n        if (oldText.value && newText.value && hunks.length > 0) {\n            serializeContentToHTML();\n        }\n    }, [oldText.value, newText.value, hunks, serializeContentToHTML]);\n\n    return (\n        <div>\n            <header className=\"header\">\n                <div className=\"input\">\n                    <Input.TextArea className=\"text\" rows={5} placeholder=\"OLD CODE...\" {...oldText} />\n                    <Input.TextArea className=\"text\" rows={5} placeholder=\"NEW CODE...\" {...newText} />\n                </div>\n            </header>\n            <main id=\"diff-view\">\n                <Diff viewType=\"split\" diffType={type} hunks={hunks || EMPTY_HUNKS}>\n                    {hunks =>\n                        hunks.map(hunk => (\n                            <Hunk key={hunk.content} hunk={hunk} codeEvents={codeEvents} widgets={widgets} />\n                        ))\n                    }\n                </Diff>\n            </main>\n        </div>\n    );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,SAAS,QAAQ,QAAQ;AAClC,SAASC,KAAK,QAAQ,MAAM;AAC5B,SAASC,SAAS,EAAEC,WAAW,QAAQ,SAAS;AAChD,SAASC,SAAS,EAAEC,IAAI,EAAEC,IAAI,EAAEC,YAAY,QAAQ,iBAAiB;AACrE,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,YAAY;AAE3D,OAAO,qBAAqB;AAC5B,OAAO,iCAAiC;AACxC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,WAAW,GAAG,EAAE;AAEtB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAMC,OAAO,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5B,MAAMS,OAAO,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5B,MAAM,CAAC;IAAEU,IAAI;IAAEC;EAAM,CAAC,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC;IAAEsB,IAAI,EAAE,EAAE;IAAEC,KAAK,EAAEN;EAAY,CAAC,CAAC;EAE7E,MAAMQ,YAAY,GAAGvB,WAAW,CAAC,MAAM;IACnC,IAAIkB,OAAO,CAACM,KAAK,IAAIL,OAAO,CAACK,KAAK,EAAE;MAChC,MAAMC,QAAQ,GAAGpB,WAAW,CAACD,SAAS,CAACc,OAAO,CAACM,KAAK,EAAEL,OAAO,CAACK,KAAK,CAAC,EAAE;QAAEE,OAAO,EAAE;MAAE,CAAC,CAAC;MACrF,MAAM,CAACC,IAAI,CAAC,GAAGrB,SAAS,CAACmB,QAAQ,EAAE;QAAEG,eAAe,EAAE;MAAM,CAAC,CAAC;MAC9DN,OAAO,CAAC;QAAEF,IAAI,EAAE,OAAO;QAAEC,KAAK,EAAEM,IAAI,CAACN,KAAK,IAAIN;MAAY,CAAC,CAAC;IAChE;EACJ,CAAC,EAAE,CAACG,OAAO,CAACM,KAAK,EAAEL,OAAO,CAACK,KAAK,CAAC,CAAC;EAElCzB,SAAS,CAAC,MAAM;IACZwB,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,CAACL,OAAO,CAACM,KAAK,EAAEL,OAAO,CAACK,KAAK,EAAED,YAAY,CAAC,CAAC;EAEhD,MAAM,CAACM,aAAa,EAAE;IAAEC,gBAAgB;IAAEC;EAAW,CAAC,CAAC,GAAGpB,gBAAgB,CAAC,CAAC;EAC5E,MAAMqB,UAAU,GAAG;IACfC,aAAaA,CAAC;MAAEC;IAAO,CAAC,EAAE;MACtB,MAAMC,GAAG,GAAG1B,YAAY,CAACyB,MAAM,CAAC;MAChC,IAAI,CAACL,aAAa,CAACM,GAAG,CAAC,EAAE;QACrBL,gBAAgB,CAACK,GAAG,CAAC;MACzB;IACJ;EACJ,CAAC;EAED,MAAMC,OAAO,GAAGlC,SAAS,CAAC2B,aAAa,EAAE,CAAC;IAAEQ;EAAS,CAAC,EAAEC,SAAS,kBAC7DxB,OAAA,CAACF,YAAY;IAAiB0B,SAAS,EAAEA,SAAU;IAACD,QAAQ,EAAEA,QAAS;IAACE,eAAe,EAAER;EAAW,GAAjFO,SAAS;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAA0E,CACzG,CAAC;EAEF,MAAMC,sBAAsB,GAAG5C,WAAW,CAAC,MAAM;IAC7C,MAAM6C,cAAc,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IAC3D,IAAI,CAACF,cAAc,EAAE;MACjB;IACJ;IACA,MAAMG,WAAW,GAAGH,cAAc,CAACI,SAAS;;IAE5C;IACA,MAAMC,MAAM,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;IACD,MAAMC,QAAQ,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBD,MAAM;AAC5B;AACA;AACA;AACA,kBAAkBF,WAAW;AAC7B;AACA;AACA,SAAS;IAEDI,KAAK,CAAC,iCAAiC,EAAE;MACvCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAEP;MAAS,CAAC;IAC3C,CAAC,CAAC,CACDQ,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACAC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C;IACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZH,OAAO,CAACG,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEJnE,SAAS,CAAC,MAAM;IACZ,IAAImB,OAAO,CAACM,KAAK,IAAIL,OAAO,CAACK,KAAK,IAAIH,KAAK,CAAC8C,MAAM,GAAG,CAAC,EAAE;MACpDvB,sBAAsB,CAAC,CAAC;IAC5B;EACJ,CAAC,EAAE,CAAC1B,OAAO,CAACM,KAAK,EAAEL,OAAO,CAACK,KAAK,EAAEH,KAAK,EAAEuB,sBAAsB,CAAC,CAAC;EAEjE,oBACI9B,OAAA;IAAAsD,QAAA,gBACItD,OAAA;MAAQuD,SAAS,EAAC,QAAQ;MAAAD,QAAA,eACtBtD,OAAA;QAAKuD,SAAS,EAAC,OAAO;QAAAD,QAAA,gBAClBtD,OAAA,CAACX,KAAK,CAACmE,QAAQ;UAACD,SAAS,EAAC,MAAM;UAACE,IAAI,EAAE,CAAE;UAACC,WAAW,EAAC,aAAa;UAAA,GAAKtD;QAAO;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACnF7B,OAAA,CAACX,KAAK,CAACmE,QAAQ;UAACD,SAAS,EAAC,MAAM;UAACE,IAAI,EAAE,CAAE;UAACC,WAAW,EAAC,aAAa;UAAA,GAAKrD;QAAO;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACT7B,OAAA;MAAM2D,EAAE,EAAC,WAAW;MAAAL,QAAA,eAChBtD,OAAA,CAACP,IAAI;QAACmE,QAAQ,EAAC,OAAO;QAACC,QAAQ,EAAEvD,IAAK;QAACC,KAAK,EAAEA,KAAK,IAAIN,WAAY;QAAAqD,QAAA,EAC9D/C,KAAK,IACFA,KAAK,CAACuD,GAAG,CAACC,IAAI,iBACV/D,OAAA,CAACN,IAAI;UAAoBqE,IAAI,EAAEA,IAAK;UAAC7C,UAAU,EAAEA,UAAW;UAACI,OAAO,EAAEA;QAAQ,GAAnEyC,IAAI,CAACC,OAAO;UAAAtC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAyD,CACnF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd;AAAC1B,EAAA,CA5GQD,GAAG;EAAA,QACQN,QAAQ,EACRA,QAAQ,EAekCC,gBAAgB;AAAA;AAAAoE,EAAA,GAjBrE/D,GAAG;AA8GZ,MAAMgE,WAAW,GAAGlC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACnD9C,QAAQ,CAACgF,MAAM,eAACnE,OAAA,CAACE,GAAG;EAAAwB,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEqC,WAAW,CAAC;AAErC,eAAehE,GAAG;AAAC,IAAA+D,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}