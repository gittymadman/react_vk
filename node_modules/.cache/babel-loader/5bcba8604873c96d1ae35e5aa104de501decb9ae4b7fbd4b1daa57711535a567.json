{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\krv11\\\\OneDrive\\\\Desktop\\\\langchain\\\\my-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nimport diff from 'diff';\n// Example old and new code snippets\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst oldCode = `\nfunction MyComponent() {\n  return <div>Hello, old world!</div>;\n}\n`;\nconst newCode = `\nfunction MyComponent() {\n  return <div>Hello, new world!</div>;\n}\n`;\n\n// Function to generate Unified Diff format text\nconst generateDiffText = (oldCode, newCode) => {\n  const oldLines = oldCode.trim().split('\\n');\n  const newLines = newCode.trim().split('\\n');\n  const diffText = diff.createPatch('oldCode', 'newCode', oldLines, newLines);\n  return diffText.join('\\n');\n};\nconst DiffViewer = () => {\n  const diffText = generateDiffText(oldCode, newCode);\n  const [diff, error] = parseDiff(diffText);\n  if (error) {\n    console.error('Error parsing diff:', error);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error parsing diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n  if (!diff || !diff.hunks) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Failed to parse diff\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Diff, {\n    viewType: \"split\",\n    diff: diff,\n    children: hunks => (diff.hunks || []).map(hunk => /*#__PURE__*/_jsxDEV(Hunk, {\n      hunk: hunk\n    }, hunk.content, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = DiffViewer;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Code Difference Viewer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiffViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"DiffViewer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","Diff","Hunk","parseDiff","diff","jsxDEV","_jsxDEV","oldCode","newCode","generateDiffText","oldLines","trim","split","newLines","diffText","createPatch","join","DiffViewer","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","hunks","viewType","map","hunk","content","_c","App","className","_c2","$RefreshReg$"],"sources":["C:/Users/krv11/OneDrive/Desktop/langchain/my-app/src/App.js"],"sourcesContent":["import React from 'react';\nimport { Diff, Hunk, parseDiff } from 'react-diff-view';\nimport 'react-diff-view/style/index.css';\nimport diff from 'diff';\n// Example old and new code snippets\nconst oldCode = `\nfunction MyComponent() {\n  return <div>Hello, old world!</div>;\n}\n`;\n\nconst newCode = `\nfunction MyComponent() {\n  return <div>Hello, new world!</div>;\n}\n`;\n\n// Function to generate Unified Diff format text\nconst generateDiffText = (oldCode, newCode) => {\n  const oldLines = oldCode.trim().split('\\n');\n  const newLines = newCode.trim().split('\\n');\n\n  const diffText = diff.createPatch('oldCode', 'newCode', oldLines, newLines);\n\n  return diffText.join('\\n');\n};\n\nconst DiffViewer = () => {\n  const diffText = generateDiffText(oldCode, newCode);\n  const [diff, error] = parseDiff(diffText);\n\n  if (error) {\n    console.error('Error parsing diff:', error);\n    return <div>Error parsing diff</div>;\n  }\n\n  if (!diff || !diff.hunks) {\n    return <div>Failed to parse diff</div>;\n  }\n\n  return (\n    <Diff viewType=\"split\" diff={diff}>\n      {hunks => (diff.hunks || []).map(hunk => (\n        <Hunk key={hunk.content} hunk={hunk} />\n      ))}\n    </Diff>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Code Difference Viewer</h1>\n      <DiffViewer />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,IAAI,EAAEC,SAAS,QAAQ,iBAAiB;AACvD,OAAO,iCAAiC;AACxC,OAAOC,IAAI,MAAM,MAAM;AACvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG;AAChB;AACA;AACA;AACA,CAAC;AAED,MAAMC,OAAO,GAAG;AAChB;AACA;AACA;AACA,CAAC;;AAED;AACA,MAAMC,gBAAgB,GAAGA,CAACF,OAAO,EAAEC,OAAO,KAAK;EAC7C,MAAME,QAAQ,GAAGH,OAAO,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAC3C,MAAMC,QAAQ,GAAGL,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAE3C,MAAME,QAAQ,GAAGV,IAAI,CAACW,WAAW,CAAC,SAAS,EAAE,SAAS,EAAEL,QAAQ,EAAEG,QAAQ,CAAC;EAE3E,OAAOC,QAAQ,CAACE,IAAI,CAAC,IAAI,CAAC;AAC5B,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,MAAMH,QAAQ,GAAGL,gBAAgB,CAACF,OAAO,EAAEC,OAAO,CAAC;EACnD,MAAM,CAACJ,IAAI,EAAEc,KAAK,CAAC,GAAGf,SAAS,CAACW,QAAQ,CAAC;EAEzC,IAAII,KAAK,EAAE;IACTC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,oBAAOZ,OAAA;MAAAc,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;EAEA,IAAI,CAACpB,IAAI,IAAI,CAACA,IAAI,CAACqB,KAAK,EAAE;IACxB,oBAAOnB,OAAA;MAAAc,QAAA,EAAK;IAAoB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,oBACElB,OAAA,CAACL,IAAI;IAACyB,QAAQ,EAAC,OAAO;IAACtB,IAAI,EAAEA,IAAK;IAAAgB,QAAA,EAC/BK,KAAK,IAAI,CAACrB,IAAI,CAACqB,KAAK,IAAI,EAAE,EAAEE,GAAG,CAACC,IAAI,iBACnCtB,OAAA,CAACJ,IAAI;MAAoB0B,IAAI,EAAEA;IAAK,GAAzBA,IAAI,CAACC,OAAO;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACM,EAAA,GApBIb,UAAU;AAsBhB,MAAMc,GAAG,GAAGA,CAAA,KAAM;EAChB,oBACEzB,OAAA;IAAK0B,SAAS,EAAC,KAAK;IAAAZ,QAAA,gBAClBd,OAAA;MAAAc,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BlB,OAAA,CAACW,UAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAACS,GAAA,GAPIF,GAAG;AAST,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAG,GAAA;AAAAC,YAAA,CAAAJ,EAAA;AAAAI,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}